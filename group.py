# group.py
import asyncio
import random
from contextlib import closing
from typing import Dict, Set, List

from aiogram import types, Bot
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sosalsa import add_sits, get_sits
from db import get_connection

# ==========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ==========================
STICKER_FILE_ID = "CAACAgIAAyEFAASjKavKAAIDrGi31TwpfP-R-JI64M0v6eRnTCFxAAJMUAACITxRSq0hIi2dEdhQNgQ"
VOICE_PATH = "images/poehali.ogg"
EVENT_COST = 1  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
JOIN_COST = 1   # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

PREPARE_DELAY_SEC = 10 * 60   # 10 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
JOIN_WINDOW_SEC = 5 * 60      # 5 –º–∏–Ω—É—Ç –æ–∫–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

GROUP_JOIN_MESSAGES = [
    "{name} –ø—Ä–∏—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —Å–±–æ–∫—É",
    "{name} —Å–∞–¥–∏—Ç—Å—è –Ω–∞ –¥–∏–≤–∞–Ω –∏ —Å–º–æ—Ç—Ä–∏—Ç",
    "–í—Å–µ –Ω–µ–º–Ω–æ–≥–æ –¥–≤–∏–≥–∞—é—Ç—Å—è —á—Ç–æ–±—ã –¥–∞—Ç—å {name} –º–µ—Å—Ç–æ",
    "{name} —Å–∞–¥–∏—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä –∫—Ä—É–≥–∞",
    "{name} –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–µ—Å–Ω—è–µ—Ç—Å—è –∏ –ø–æ–¥—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏–∑-–∑–∞ —É–≥–ª–∞",
    "–î–ª—è {name} –Ω–µ –Ω–∞—à–ª–æ—Å—å –ª–∏—à–Ω–µ–≥–æ —Å—Ç—É–ª–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏—à–ª–æ—Å—å —Å–µ—Å—Ç—å –Ω–∞ –ø–æ–ª—É",
]

# ==========================
# –°–û–°–¢–û–Ø–ù–ò–ï –ò–í–ï–ù–¢–ê
# ==========================
class GroupEventState:
    __slots__ = ("participants", "joined_order", "names", "join_msg_id", "join_open", "lock", "freebies")

    def __init__(self) -> None:
        self.participants: Set[int] = set()       # user_id —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self.joined_order: List[int] = []         # –ø–æ—Ä—è–¥–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self.names: Dict[int, str] = {}           # user_id -> –∏–º—è
        self.join_msg_id: int | None = None
        self.join_open: bool = False
        self.lock = asyncio.Lock()
        self.freebies: List[int] = []             # —Ç–µ, –∫—Ç–æ –Ω–µ —Å–º–æ–≥ –∑–∞–ø–ª–∞—Ç–∏—Ç—å


# chat_id -> state
ACTIVE_GROUP_EVENTS: Dict[int, GroupEventState] = {}

# ==========================
# –£–¢–ò–õ–ò–¢–´
# ==========================
def get_user_display_name(user_id: int, chat_id: int) -> str:
    """–ë–µ—Ä—ë–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –∏–∑ –ë–î –∏–ª–∏ user_id."""
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute(
            "SELECT name FROM users WHERE user_id = ? AND chat_id = ?",
            (user_id, chat_id),
        )
        row = cur.fetchone()
    return row[0] if row and row[0] else str(user_id)


def join_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="group_join"))
    return kb.as_markup()

# ==========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ==========================
def register_group_handlers(dp):
    @dp.callback_query(lambda c: c.data == "group_join")
    async def on_group_join(query: types.CallbackQuery):
        chat_id = query.message.chat.id
        user_id = query.from_user.id

        state = ACTIVE_GROUP_EVENTS.get(chat_id)
        if not state or not state.join_open:
            await query.answer("–û–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ.", show_alert=True)
            return

        async with state.lock:
            if user_id in state.participants or user_id in state.freebies:
                await query.answer("–¢—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!", show_alert=True)
                return

            balance = get_sits(chat_id, user_id)
            display_name = get_user_display_name(user_id, chat_id)
            if display_name == str(user_id):
                display_name = query.from_user.full_name or (
                    f"@{query.from_user.username}" if query.from_user.username else str(user_id)
                )
            state.names[user_id] = display_name

            if balance < JOIN_COST:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç–∞ ‚Äî –≤ —Å–ø–∏—Å–æ–∫ freebies
                state.freebies.append(user_id)
                await query.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –º–∞—Å—Ç—É—Ä–±–∞—Ü–∏–∏, –Ω–æ –º—ã –≤—Å—ë –∑–∞–ø–∏—à–µ–º –Ω–∞ cum–µ—Ä—É", show_alert=True)
            else:
                # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–∏—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                add_sits(chat_id, user_id, -JOIN_COST)
                state.participants.add(user_id)
                state.joined_order.append(user_id)
                await query.answer("–¢—ã –≤ –¥–µ–ª–µ!")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        phrase = random.choice(GROUP_JOIN_MESSAGES).format(name=display_name)
        await query.message.answer(phrase)

# ==========================
# –ó–ê–ü–£–°–ö –ò–í–ï–ù–¢–ê
# ==========================
async def start_group_event(message: types.Message, user_id: int):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    balance = get_sits(chat_id, user_id)
    if balance < EVENT_COST:
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞! –ù—É–∂–Ω–æ {EVENT_COST}, —É —Ç–µ–±—è {balance}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≤–µ–Ω—Ç
    if chat_id in ACTIVE_GROUP_EVENTS:
        await message.answer("–ò–≤–µ–Ω—Ç —É–∂–µ –∏–¥—ë—Ç, –¥–æ–∂–¥–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–∏—Ç –∑–∞ –∑–∞–ø—É—Å–∫
    add_sits(chat_id, user_id, -EVENT_COST)
    state = GroupEventState()
    ACTIVE_GROUP_EVENTS[chat_id] = state

    # –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç
    state.participants.add(user_id)
    state.joined_order.append(user_id)
    name = get_user_display_name(user_id, chat_id)
    state.names[user_id] = name

    await message.answer_sticker(STICKER_FILE_ID)
    await message.answer(f"–° —Ç–≤–æ–µ–≥–æ —Å—á—ë—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {EVENT_COST} —Å–∏—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –∏–≤–µ–Ω—Ç–∞")

    asyncio.create_task(_run_event_flow(message.bot, chat_id))

# ==========================
# –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–î–ï–ù–ò–Ø
# ==========================
async def _run_event_flow(bot: Bot, chat_id: int):
    state = ACTIVE_GROUP_EVENTS.get(chat_id)
    if not state:
        return

    try:
        # 10 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
        await asyncio.sleep(PREPARE_DELAY_SEC)

        # –ì–æ–ª–æ—Å–æ–≤–æ–µ
        try:
            voice = FSInputFile(VOICE_PATH)
            await bot.send_voice(chat_id, voice)
        except Exception:
            pass

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        msg = await bot.send_message(chat_id, "–ü–æ–µ—Ö–∞–ª–∏! –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=join_keyboard())
        state.join_msg_id = msg.message_id
        state.join_open = True

        # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await asyncio.sleep(JOIN_WINDOW_SEC)

    finally:
        if state:
            state.join_open = False

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    if state and state.join_msg_id:
        try:
            await bot.edit_message_reply_markup(chat_id, state.join_msg_id, reply_markup=None)
        except Exception:
            pass

    # –§–∏–Ω–∞–ª
    if state:
        participants = state.joined_order
        freebies = state.freebies

        if not participants:
            await bot.send_message(chat_id, "–ì—Ä—É–ø–ø–æ–≤–∞—è –º–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è üò¢")
        else:
            lines = [state.names.get(uid) or get_user_display_name(uid, chat_id) for uid in participants]
            text = "–ì—Ä—É–ø–ø–æ–≤–∞—è –º–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º. –í–æ—Ç –æ–Ω–∏ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑:\n" + "\n".join(lines)
            await bot.send_message(chat_id, text)

            # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
            winner_id = random.choice(participants)
            winner_name = state.names[winner_id]
            reward = len(participants) + 1
            add_sits(chat_id, winner_id, reward)
            await bot.send_message(chat_id, f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}! –ü–æ–ª—É—á–∞–µ—Ç {reward} —Å–∏—Ç!")

            # –ë–æ–Ω—É—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ freebies
            if freebies:
                lucky = random.choice(freebies)
                lucky_name = state.names[lucky]
                add_sits(chat_id, lucky, 1)
                await bot.send_message(chat_id, f"‚ú® –¢–∞–∫–∂–µ –Ω–µ–º–Ω–æ–∂–∫–æ –∫–∞–ø–Ω—É–ª–æ –Ω–∞ {lucky_name} ‚Äî +1 —Å–∏—Ç!")

        ACTIVE_GROUP_EVENTS.pop(chat_id, None)
