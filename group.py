# group.py
import asyncio
import random
from contextlib import closing
from typing import Dict, Set

from aiogram import types
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot
from sosalsa import add_sits, get_sits

from db import get_connection

# ==========================
# –ù–ê–°–¢–†–û–ô–ö–ò –ò –¢–ï–ö–°–¢–´
# ==========================

STICKER_FILE_ID = "CAACAgIAAyEFAASjKavKAAIDrGi31TwpfP-R-JI64M0v6eRnTCFxAAJMUAACITxRSq0hIi2dEdhQNgQ"
VOICE_PATH = "images/poehali.ogg"
EVENT_COST = 3  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–≤–µ–Ω—Ç–∞ –≤ —Å–∏—Ç–∞—Ö

PREPARE_DELAY_SEC = 10 * 60   # 10 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
JOIN_WINDOW_SEC   = 5 * 60    # 5 –º–∏–Ω—É—Ç –æ–∫–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

GROUP_JOIN_MESSAGES = [
    "{name} –ø—Ä–∏—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —Å–±–æ–∫—É",
    "{name} —Å–∞–¥–∏—Ç—Å—è –Ω–∞ –¥–∏–≤–∞–Ω –∏ —Å–º–æ—Ç—Ä–∏—Ç",
    "–í—Å–µ –Ω–µ–º–Ω–æ–≥–æ –¥–≤–∏–≥–∞—é—Ç—Å—è —á—Ç–æ–±—ã –¥–∞—Ç—å {name} –º–µ—Å—Ç–æ",
    "{name} —Å–∞–¥–∏—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä –∫—Ä—É–≥–∞",
    "{name} –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–µ—Å–Ω—è–µ—Ç—Å—è –∏ –ø–æ–¥—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏–∑-–∑–∞ —É–≥–ª–∞",
    "–î–ª—è {name} –Ω–µ –Ω–∞—à–ª–æ—Å—å –ª–∏—à–Ω–µ–≥–æ —Å—Ç—É–ª–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏—à–ª–æ—Å—å —Å–µ—Å—Ç—å –Ω–∞ –ø–æ–ª—É",
]

# ==========================
# –°–û–°–¢–û–Ø–ù–ò–ï –ò–í–ï–ù–¢–ê –ù–ê –ß–ê–¢
# ==========================

class GroupEventState:
    __slots__ = ("participants", "joined_order", "names", "join_msg_id", "join_open", "lock")

    def __init__(self) -> None:
        self.participants: Set[int] = set()
        self.joined_order: list[int] = []
        self.names: Dict[int, str] = {}
        self.join_msg_id: int | None = None
        self.join_open: bool = False
        self.lock = asyncio.Lock()

# chat_id -> state
ACTIVE_GROUP_EVENTS: Dict[int, GroupEventState] = {}


# ==========================
# –£–¢–ò–õ–ò–¢–´
# ==========================

def get_user_display_name(user_id: int, chat_id: int) -> str:
    """–ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –∏–∑ –ë–î, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—ë–º id —Å—Ç—Ä–æ–∫–æ–π."""
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT name
            FROM users
            WHERE user_id = ? AND chat_id = ?
        """, (user_id, chat_id))
        row = cur.fetchone()
    if row and row[0]:
        return row[0]
    return str(user_id)


def join_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="group_join"))
    return kb.as_markup()


# ==========================
# –ü–£–ë–õ–ò–ß–ù–´–ï –¢–û–ß–ö–ò
# ==========================

def register_group_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª."""
    @dp.callback_query(lambda c: c.data == "group_join")
    async def on_group_join(query: types.CallbackQuery):
        chat_id = query.message.chat.id
        user_id = query.from_user.id

        state = ACTIVE_GROUP_EVENTS.get(chat_id)
        if not state or not state.join_open:
            await query.answer("–û–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ.", show_alert=True)
            return

        async with state.lock:
            if user_id in state.participants:
                await query.answer("–¢—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!", show_alert=True)
                return

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
            state.participants.add(user_id)
            state.joined_order.append(user_id)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è
            display_name = get_user_display_name(user_id, chat_id)
            if display_name == str(user_id):  # –µ—Å–ª–∏ –≤ –ë–î –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å TG
                display_name = query.from_user.full_name or (f"@{query.from_user.username}" if query.from_user.username else str(user_id))
            state.names[user_id] = display_name

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        phrase = random.choice(GROUP_JOIN_MESSAGES).format(name=display_name)
        await query.message.answer(phrase)

        # –í—Å–ø–ª—ã–≤–∞—à–∫–∞ –¥–ª—è –Ω–∞–∂–∞–≤—à–µ–≥–æ
        await query.answer("–¢—ã –≤ –¥–µ–ª–µ!")

    # –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ‚Äî dp —É–∂–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ —Ö–µ–Ω–¥–ª–µ—Ä


async def start_group_event(message: types.Message, user_id: int):
    chat_id = message.chat.id
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞.
    1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    2) –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–≤–µ–Ω—Ç–∞
    3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
    4) –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç
    5) –ì–æ–ª–æ—Å–æ–≤–æ–µ
    6) –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª (5 –º–∏–Ω—É—Ç)
    7) –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, —à–ª—ë–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    balance = get_sits(chat_id, user_id)
    if balance < EVENT_COST:
        await message.answer(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≤–µ–Ω—Ç–∞! –ù—É–∂–Ω–æ: {EVENT_COST}, —É —Ç–µ–±—è: {balance}"
        )
        return

    # –ù–µ –¥–∞—ë–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—Ç–æ—Ä–æ–π –∏–≤–µ–Ω—Ç –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ
    if chat_id in ACTIVE_GROUP_EVENTS:
        await message.answer("–ò–≤–µ–Ω—Ç —É–∂–µ –∏–¥—ë—Ç ‚Äî –ø–æ–¥–æ–∂–¥–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–≤–µ–Ω—Ç–∞ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    add_sits(chat_id, user_id, -EVENT_COST)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ACTIVE_GROUP_EVENTS[chat_id] = GroupEventState()

    # 1) –°—Ç–∏–∫–µ—Ä
    await message.answer_sticker(STICKER_FILE_ID)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–ø–∏—Å–∞–Ω–∏–∏
    await message.answer(f"–° —Ç–≤–æ–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {EVENT_COST} —Å–∏—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –∏–≤–µ–Ω—Ç–∞")

    # –ó–∞–ø—É—Å–∫–∞–µ–º ¬´—Ñ–ª–æ—É¬ª –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –±–æ—Ç
    asyncio.create_task(_run_event_flow(message.bot, chat_id))


# ==========================
# –í–ù–£–¢–†–ï–ù–ù–Ø–Ø –õ–û–ì–ò–ö–ê
# ==========================

async def _run_event_flow(bot: Bot, chat_id: int):
    state = ACTIVE_GROUP_EVENTS.get(chat_id)
    if not state:
        return

    try:
        # 2) –ñ–¥—ë–º 10 –º–∏–Ω—É—Ç
        await asyncio.sleep(PREPARE_DELAY_SEC)

        # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
        try:
            voice = FSInputFile(VOICE_PATH)
            await bot.send_voice(chat_id, voice)
        except Exception:
            # –î–∞–∂–µ –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –Ω–µ —É–ª–µ—Ç–µ–ª–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
            pass

        # 4) –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª
        join_msg = await bot.send_message(
            chat_id,
            "–ü–æ–µ—Ö–∞–ª–∏! –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É",
            reply_markup=join_keyboard()
        )
        state.join_msg_id = join_msg.message_id
        state.join_open = True

        # 5) –ñ–¥—ë–º 5 –º–∏–Ω—É—Ç –æ–∫–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await asyncio.sleep(JOIN_WINDOW_SEC)

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ (–¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è)
        if state:
            state.join_open = False

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É (–Ω–µ —É–¥–∞–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if state and state.join_msg_id:
        try:
            await bot.edit_message_reply_markup(chat_id, state.join_msg_id, reply_markup=None)
        except Exception:
            pass

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if state:
        if not state.joined_order:
            await bot.send_message(chat_id, "–ì—Ä—É–ø–ø–æ–≤–∞—è –º–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è üò¢")
        else:
            lines = []
            for uid in state.joined_order:
                lines.append(state.names.get(uid) or get_user_display_name(uid, chat_id))
            text = "–ì—Ä—É–ø–ø–æ–≤–∞—è –º–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º. –í–æ—Ç –æ–Ω–∏ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑:\n" + "\n".join(lines)
            await bot.send_message(chat_id, text)

            # üé≤ –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            import random
            winner_id = random.choice(state.joined_order)
            winner_name = state.names.get(winner_id) or get_user_display_name(winner_id, chat_id)

            # –°–æ–æ–±—â–µ–Ω–∏–µ + –≤—ã–¥–∞—á–∞ —Å–∏—Ç–∞
            await bot.send_message(chat_id, f"–í–µ—Å—å —Å–∏—Ç —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞–ª—Å—è {winner_name}!")
            add_sits(chat_id, winner_id, 3)

        # –ß–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ACTIVE_GROUP_EVENTS.pop(chat_id, None)
