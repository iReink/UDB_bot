import json
import os
import asyncio
import re
from datetime import datetime, time, timedelta
from collections import defaultdict
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
import logging
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import FSInputFile, CallbackQuery

TOKEN = "7566137789:AAFk7sUaT4qFTV5xGzgO1Lh44hzr4bRU8hQ"
STATS_FILE = "stats.json"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
SHOP_ITEMS = {
    "piss8": {
        "name": "üí¶ 8 –ª–∏—Ç—Ä–æ–≤ –º–æ—á–∏",
        "price": 8,
        "buy_text": "üí¶ {user_name} –∫—É–ø–∏–ª 8 –ª–∏—Ç—Ä–æ–≤ –º–æ—á–∏ –∏ –∑–∞–±—Ä—ã–∑–≥–∞–ª —á—è—Ç! \nüí¶üí¶üí¶üí¶üí¶üí¶üí¶üí¶"
    },
    "mic1": {
        "name": "üé§ –°–∫–∞–∑–∞—Ç—å –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω",
        "price": 1,
        "buy_text": "üé§ {user_name} –≤–∏–±—Ä–∏—Ä—É–µ—Ç! üé§"
    },
    "sticker1000": {
        "name": "üìù –ö—É–ø–∏—Ç—å —Å—Ç–∏–∫–µ—Ä",
        "price": 1000,
        "buy_text": "–í–æ—É –≤–æ—É! {user_name} –≤—ã–ª–æ–∂–∏–ª –∫—Ä—É–≥–ª–µ–Ω—å–∫—É—é —Å—É–º–º—É, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Å—Ç–∏–∫–µ—Ä! \n–ù–∞–ø–∏—à–∏ –º–∏–Ω–∏—Å—Ç—Ä—É —Å—Ç–∏–∫–µ—Ä–æ–≤ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å, –Ω–æ –ø–æ–º–Ω–∏, —á—Ç–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ –Ω–∏–º."
    },
    "spider1": {
        "name": "üï∑ –°–∫–∏–Ω—É—Ç—å –≤ —á–∞—Ç –ø–∞—É–∫–∞ üï∑",
        "price": 1,
        "buy_text": "üï∑ {user_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞—É–∫–∞ –≤ —á–∞—Ç! üï∑",
        "action": "send_spider",
        "file": os.path.join("images", "spider.jpg")  # –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–µ–∫—Ç–∞
    }
}



logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)


bot = Bot(token=TOKEN)
dp = Dispatcher()

# ---------- –†–∞–±–æ—Ç–∞ —Å JSON ----------

def load_stats():
    if not os.path.exists(STATS_FILE):
        return {}
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_stats(data):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

stats = load_stats()

def ensure_user(chat_id, user_id, user_name):
    chat_id = str(chat_id)
    user_id = str(user_id)

    if chat_id not in stats:
        stats[chat_id] = {}
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ {chat_id}")

    if user_id not in stats[chat_id]:
        stats[chat_id][user_id] = {
            "name": user_name,
            "daily": [{"messages": 0, "words": 0, "chars": 0} for _ in range(7)],
            "total": {"messages": 0, "words": 0, "chars": 0}
        }
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID {user_id}) –≤ —á–∞—Ç {chat_id}")


def update_stats(chat_id, user_id, user_name, message, chat_name=None):
    ensure_user(chat_id, user_id, user_name)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text:  # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        words = len(message.text.split())
        chars = len(message.text)
    else:  # –º–µ–¥–∏–∞, —Å—Ç–∏–∫–µ—Ä—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Ç.–ø.
        words = 1
        chars = 1

    user_data = stats[str(chat_id)][str(user_id)]
    user_data["daily"][0]["messages"] += 1
    user_data["daily"][0]["words"] += words
    user_data["daily"][0]["chars"] += chars

    user_data["total"]["messages"] += 1
    user_data["total"]["words"] += words
    user_data["total"]["chars"] += chars

    if not chat_name:
        chat_name = chat_id  # fallback
    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —á–∞—Ç \"{chat_name}\", –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}, +1 —Å–æ–æ–±—â–µ–Ω–∏–µ, +{words} —Å–ª–æ–≤, +{chars} —Å–∏–º–≤–æ–ª–æ–≤")

    save_stats(stats)



def shift_daily_stats():
    for chat_id in stats:
        for user_id in stats[chat_id]:
            daily = stats[chat_id][user_id]["daily"]
            daily.pop(-1)  # —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            daily.insert(0, {"messages": 0, "words": 0, "chars": 0})
    save_stats(stats)
    logging.info("–°—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–≤–∏–Ω—É—Ç–∞")


# ---------- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ ----------

async def daily_shift_task():
    while True:
        now = datetime.now()
        tomorrow = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        wait_seconds = (tomorrow - now).total_seconds()
        await asyncio.sleep(wait_seconds)
        shift_daily_stats()

# ---------- –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ç–æ–ø-3 ----------

async def daily_reward_task():
    while True:
        now = datetime.now()
        reward_time = now.replace(hour=23, minute=55, second=0, microsecond=0)

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ–∑–∂–µ 23:55, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if now >= reward_time:
            reward_time += timedelta(days=1)

        wait_seconds = (reward_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
        await reward_daily_top(bot)


# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------


@dp.message(Command("weeklytop"))
async def weekly_top(message: types.Message):
    chat_id = str(message.chat.id)
    if chat_id not in stats:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    totals = []
    for user_id, data in stats[chat_id].items():
        week_msgs = sum(day["messages"] for day in data["daily"])
        totals.append((week_msgs, data["name"]))
    totals.sort(reverse=True, key=lambda x: x[0])

    text = "üèÜ –¢–æ–ø-10 –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for i, (count, name) in enumerate(totals[:10], 1):
        text += f"{i}. {name} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await message.reply(text)

@dp.message(Command("totaltop"))
async def total_top(message: types.Message):
    chat_id = str(message.chat.id)
    if chat_id not in stats:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    totals = []
    for user_id, data in stats[chat_id].items():
        totals.append((data["total"]["messages"], data["name"]))
    totals.sort(reverse=True, key=lambda x: x[0])

    text = "üìä –¢–æ–ø-10 –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
    for i, (count, name) in enumerate(totals[:10], 1):
        text += f"{i}. {name} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await message.reply(text)

@dp.message(Command("flood"))
async def flood_stats(message: types.Message):
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)

    if chat_id not in stats or user_id not in stats[chat_id]:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–±–µ.")
        return

    data = stats[chat_id][user_id]

    # –ü–æ–¥—Å—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
    week_msgs = sum(day["messages"] for day in data["daily"])
    week_sorted = sorted(
        stats[chat_id].items(),
        key=lambda item: sum(d["messages"] for d in item[1]["daily"]),
        reverse=True
    )
    week_position = next(
        (i + 1 for i, (uid, _) in enumerate(week_sorted) if uid == user_id),
        None
    )

    # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ —Ç–æ–ø–∞
    total_sorted = sorted(
        stats[chat_id].items(),
        key=lambda item: item[1]["total"]["messages"],
        reverse=True
    )
    total_position = next(
        (i + 1 for i, (uid, _) in enumerate(total_sorted) if uid == user_id),
        None
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    text = (
        f"üìà –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ó–∞ –Ω–µ–¥–µ–ª—é: {week_msgs} —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ—Å—Ç–æ #{week_position})\n"
        f"–í—Å–µ–≥–æ: {data['total']['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ—Å—Ç–æ #{total_position})"
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å —Å–∏—Ç–∞
    sits_balance = data.get("sits", 0)
    if sits_balance > 0:
        text += f"\nüí¶ –ë–∞–ª–∞–Ω—Å —Å–∏—Ç–∞: {sits_balance}"

    await message.reply(text)

@dp.message(Command("shop"))
async def show_shop(message: types.Message):
    balance = get_sits(message.chat.id, message.from_user.id)
    await message.answer(
        "üè™ –ú–∞–≥–∞–∑–∏–Ω—á–∏–∫ –î—è–¥–∏ –î–æ–∫—Ç–æ—Ä–∞\n"
        f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} —Å–∏—Ç\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–æ–≤–∞—Ä:",
        reply_markup=build_shop_keyboard()
    )

@dp.message(Command("addsit"))
async def add_sit_command(message: types.Message):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addsit N (N ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0)")
        return

    try:
        amount = int(parts[1])
    except ValueError:
        await message.reply("N –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    if amount <= 0:
        await message.reply("N –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    add_sits(message.chat.id, message.from_user.id, amount)
    new_balance = get_sits(message.chat.id, message.from_user.id)
    await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Å–∏—Ç. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}")


@dp.message()
async def handle_message(message: types.Message):
    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith("/"):
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –º–µ–¥–∏–∞
    if not (message.text or message.sticker or message.photo or message.video or message.voice or message.animation):
        return

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –¥–Ω—è" ===
    if message.text and "–°–µ–≥–æ–¥–Ω—è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è" in message.text:
        import re
        match = re.search(r"–°–µ–≥–æ–¥–Ω—è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è\s*-\s*(.*?)\s*\(", message.text)
        if match:
            winner_name = match.group(1).strip()
            chat_id_str = str(message.chat.id)
            # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –≤ stats
            if chat_id_str in stats:
                for uid, data in stats[chat_id_str].items():
                    if data.get("name") == winner_name:
                        add_sits(chat_id_str, uid, 1)
                        await message.reply("–û–¥–Ω–∞ –ø–æ—Ä—Ü–∏—è —Å–∏—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞!")
                        break

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
    chat_name = message.chat.title if message.chat.type in ["group", "supergroup"] else message.chat.id

    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ update_stats
    update_stats(
        chat_id=message.chat.id,
        user_id=message.from_user.id,
        user_name=message.from_user.full_name,
        message=message,
        chat_name=chat_name
    )


#—Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–∏—Ç–∞
def sit_word(n: int) -> str:
    n = abs(int(n))
    if n % 10 == 1 and n % 100 != 11:
        return "—Å–∏—Ç"
    if n % 10 in (2, 3, 4) and n % 100 not in (12, 13, 14):
        return "—Å–∏—Ç–∞"
    return "—Å–∏—Ç"


#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Ç–∞
def add_sits(chat_id, user_id, amount):
    ensure_user(chat_id, user_id, "")  # —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç
    user_data = stats[str(chat_id)][str(user_id)]
    if "sits" not in user_data:
        user_data["sits"] = 0
    user_data["sits"] += amount
    save_stats(stats)

#–ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–∏—Ç–∞
def get_sits(chat_id, user_id):
    if str(chat_id) not in stats or str(user_id) not in stats[str(chat_id)]:
        return 0
    return stats[str(chat_id)][str(user_id)].get("sits", 0)

def spend_sits(chat_id, user_id, amount) -> tuple[bool, int]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —Å–ø–∏—Å–∞—Ç—å amount —Å–∏—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö: bool, –Ω–æ–≤—ã–π_–∏–ª–∏_—Ç–µ–∫—É—â–∏–π_–±–∞–ª–∞–Ω—Å: int).
    """
    chat_id = str(chat_id)
    user_id = str(user_id)

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ensure_user(chat_id, user_id, "")

    current = stats[chat_id][user_id].get("sits", 0)
    if current >= amount:
        stats[chat_id][user_id]["sits"] = current - amount
        save_stats(stats)
        return True, stats[chat_id][user_id]["sits"]
    else:
        return False, current

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–∏—Ç–∞
def build_shop_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for key, item in SHOP_ITEMS.items():
        buttons.append([InlineKeyboardButton(
            text=f"{item['name']} ({item['price']} —Å–∏—Ç)",
            callback_data=f"shop:buy:{key}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.callback_query(F.data.startswith("shop:buy:"))
async def handle_shop_buy(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ç–æ–≤–∞—Ä–∞
    item_key = callback.data.split(":")[-1]
    item = SHOP_ITEMS.get(item_key)

    if not item:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –∑–∞–¥–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ ‚Äî –¥–µ–ª–µ–≥–∏—Ä—É–µ–º
    action = item.get("action")
    if action == "send_spider":
        await action_send_spider(callback, item)
        return

    price = item["price"]
    ok, new_balance = spend_sits(chat_id, user_id, price)

    if ok:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        buy_text = item["buy_text"].format(user_name=user_name)
        await callback.message.edit_text(f"{buy_text}\n–û—Å—Ç–∞—Ç–æ–∫: {new_balance} —Å–∏—Ç")
        logging.info(f"{user_name} –∫—É–ø–∏–ª '{item['name']}' –∑–∞ {price} —Å–∏—Ç –≤ —á–∞—Ç–µ {chat_id}. –û—Å—Ç–∞—Ç–æ–∫: {new_balance}")
        await callback.answer()
    else:
        await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance}", show_alert=True)

async def action_send_spider(callback: CallbackQuery, item: dict):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—É–∫–∞.
    callback  - CallbackQuery –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.
    item      - –∑–∞–ø–∏—Å—å –∏–∑ SHOP_ITEMS (–¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å price –∏ file).
    """
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name or callback.from_user.username or str(user_id)
    user_username = (callback.from_user.username or "").lower()
    user_name_lc = user_name.strip().lower()

    price = int(item.get("price", 0))
    is_tass = (user_name_lc == "tass") or (user_username == "tass")

    # 1) –ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞—Ç—å —Å–∏—Ç—ã (–µ—Å–ª–∏ –Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
    new_balance = None
    if not is_tass and price > 0:
        ok, new_balance = spend_sits(chat_id, user_id, price)
        if not ok:
            # –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance}", show_alert=True)
            return

    # 2) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    file_path = item.get("file", "images/spider.jpg")
    if not os.path.isabs(file_path):
        file_path = os.path.join(os.path.dirname(__file__), file_path)

    # 3) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    caption = item.get("buy_text", "{user_name} –∫—É–ø–∏–ª –≤–µ—â—å").format(user_name=user_name)
    if is_tass:
        caption = f"Tass, –¥–ª—è —Ç–µ–±—è —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤—Å–µ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n{caption}"

    # 4) –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª; –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ (–µ—Å–ª–∏ —É–∂–µ —Å–ø–∏—Å–∞–ª–∏)
    try:
        photo = FSInputFile(file_path)
        await callback.message.answer_photo(photo, caption=caption)
    except FileNotFoundError:
        logging.exception(f"–§–∞–π–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        if not is_tass and price > 0:
            add_sits(chat_id, user_id, price)  # –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", show_alert=True)
        return
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—É–∫–∞: {e}")
        if not is_tass and price > 0:
            add_sits(chat_id, user_id, price)  # –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
        return

    # 5) –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é
    if new_balance is None:
        # –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏–ª–∏ price==0, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = get_sits(chat_id, user_id)

    if is_tass:
        confirmation = f"üéÅ {user_name}, –¥–ª—è —Ç–µ–±—è —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±—ã–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º ‚Äî –ø–∞—É–∫ –≤ —á–∞—Ç–µ!"
    else:
        confirmation = f"‚úÖ {user_name}, –≤—ã –∫—É–ø–∏–ª–∏ –ø–∞—É–∫–∞ –∑–∞ {price} {sit_word(price)}. –û—Å—Ç–∞—Ç–æ–∫: {new_balance} —Å–∏—Ç"

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞–≥–∞–∑–∏–Ω–æ–º (—ç—Ç–æ —É–±–µ—Ä—ë—Ç –∫–Ω–æ–ø–∫–∏)
        await callback.message.edit_text(confirmation)
    except Exception as e:
        logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")

    # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer()

#–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ç–æ–ø-3 —Å–∏—Ç–æ–º
async def reward_daily_top(bot: Bot):
    for chat_id, users in stats.items():
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        sorted_users = sorted(
            users.items(),
            key=lambda item: item[1]["daily"][0]["messages"],
            reverse=True
        )

        top3 = sorted_users[:3]
        if not top3 or top3[0][1]["daily"][0]["messages"] == 0:
            continue  # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è

        rewards = [2, 1, 1]
        text_lines = ["–ó–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∫–ª–∞–¥ –≤–æ —Ñ–ª—É–¥ –≤ —á—è—Ç–µ –Ω–∞–≥—Ä–∞–∂–¥–∞—é—Ç—Å—è:"]

        for i, (user_id, data) in enumerate(top3):
            amount = rewards[i]
            add_sits(chat_id, user_id, amount)
            text_lines.append(f"{i+1} –º–µ—Å—Ç–æ ‚Äî {data['name']} ‚Äî {amount} —Å–∏—Ç")

        try:
            await bot.send_message(chat_id, "\n".join(text_lines))
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")


# ---------- –ó–∞–ø—É—Å–∫ ----------


async def main():
    asyncio.create_task(daily_reward_task())  # –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ 23:55
    asyncio.create_task(daily_shift_task())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
