import os
import asyncio
import re
from datetime import datetime, time, timedelta
from collections import defaultdict
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
import logging
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import FSInputFile, CallbackQuery
import aiocron
import math
import random
import weekly_awards
import sticker_manager
import sqlite3
import db
from db import get_connection, get_chat_users, get_total_stats
from contextlib import closing
from db import (
    get_daily_stats,
    increment_daily_stats,
    increment_total_stats,
    get_user,
    add_or_update_user,
    get_last_7_daily_stats,
    get_all_chats,
    get_user_sex,
    increment_sticker_stats,
    get_user_display_name
)
from aiogram.types import MessageReactionUpdated, MessageReactionCountUpdated
from sticker_manager import silence_checker_task, bot as sm_bot
from mujlo import handle_mujlo_message, handle_mujlo_buy, reset_mujlo_daily
from quest import update_quest_progress

from sosalsa import register_sos_handlers

dp = Dispatcher()
register_sos_handlers(dp)

import group
group.register_group_handlers(dp)

from help import register_help_handler
register_help_handler(dp)

from quest import register_quest_handlers
register_quest_handlers(dp)

from hall import register_hall_handlers
register_hall_handlers(dp)




TOKEN = "7566137789:AAGmm_djHOuqiL2WvAkKHuGoIfnkuPMLepY"
STATS_FILE = "stats.json"
MAKOVKA_FILE_ID = "CAACAgIAAyEFAASjKavKAAOcaJ95ivqdgkA5gstkAbRt25CCRLAAAkN5AAJTNbFKdWJ4ufamt9I2BA"

# –°—Ç–∏–∫–µ—Ä–ø–∞–∫–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ª–µ–¥–∏–º
TRACKED_STICKERPACKS = {
    "UDB_true",
    # "AnotherPackName",
    # "CoolMemes2025",
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
SHOP_ITEMS = {
    "piss8": {
        "name": "üí¶ 8 –ª–∏—Ç—Ä–æ–≤ –º–æ—á–∏",
        "price": 8,
        "buy_text": "üí¶ {user_name} –∫—É–ø–∏–ª 8 –ª–∏—Ç—Ä–æ–≤ –º–æ—á–∏ –∏ –∑–∞–±—Ä—ã–∑–≥–∞–ª —á—è—Ç! \nüí¶üí¶üí¶üí¶üí¶üí¶üí¶üí¶"
    },
    "mic1": {
        "name": "üé§ –°–∫–∞–∑–∞—Ç—å –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω",
        "price": 1,
        "buy_text": "üé§ {user_name} –≤–∏–±—Ä–∏—Ä—É–µ—Ç! üé§"
    },
    "spider1": {
        "name": "üï∑ –°–∫–∏–Ω—É—Ç—å –≤ —á–∞—Ç –ø–∞—É–∫–∞ üï∑",
        "price": 1,
        "buy_text": "üï∑ {user_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞—É–∫–∞ –≤ —á–∞—Ç! üï∑",
        "action": "send_spider",
        "file": os.path.join("images", "spider.jpg")  # –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–µ–∫—Ç–∞
    },
    "filtr0": {
        "name": "‚òïÔ∏è –í—ã–ø–∏—Ç—å –∫–æ—Ñ–µ",
        "price": 0,
        "buy_text": {
            "m": "{user_name} —Å–ª–∞–¥–∫–æ –ø–æ–ø–∏–ª —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —É–ª—ã–±–Ω—É–ª—Å—è ‚òïÔ∏è‚òïÔ∏è‚òïÔ∏è",
            "f": "{user_name} —Å–ª–∞–¥–∫–æ –ø–æ–ø–∏–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —É–ª—ã–±–Ω—É–ª–∞—Å—å ‚òïÔ∏è‚òïÔ∏è‚òïÔ∏è"
        },
        "action": "drink_coffee"
    },
    "sticker1000": {
        "name": "üìù –ö—É–ø–∏—Ç—å —Å—Ç–∏–∫–µ—Ä",
        "price": 1000,
        "buy_text": "–í–æ—É –≤–æ—É! {user_name} –≤—ã–ª–æ–∂–∏–ª –∫—Ä—É–≥–ª–µ–Ω—å–∫—É—é —Å—É–º–º—É, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Å—Ç–∏–∫–µ—Ä! \n–ù–∞–ø–∏—à–∏ –º–∏–Ω–∏—Å—Ç—Ä—É —Å—Ç–∏–∫–µ—Ä–æ–≤ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å, –Ω–æ –ø–æ–º–Ω–∏, —á—Ç–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ –Ω–∏–º."
    },
    "group": {
        "name": "–ì—Ä—É–ø–ø–æ–≤–∞—è –º–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è",
        "price": 1,
        "buy_text": {
            "m": "{user_name} –≤—Å–µ—Ö –∑–æ–≤—ë—Ç –Ω–∞ –æ–≥–æ–Ω—ë–∫",
            "f": "{user_name} –≤—Å–µ—Ö –∑–æ–≤—ë—Ç –Ω–∞ –æ–≥–æ–Ω—ë–∫"
        },
    "action": "group"
    }
}



logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)


bot = Bot(token=TOKEN)
sm_bot = bot



#–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –í–∏—Ç–∞–ª–∏–∫ –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–ª–∞—Ç—É
last_reward_react_given = 0



def ensure_user(chat_id: int, user_id: int, user_name: str, username: str | None = None):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
    –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, daily_stats –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –∏ total_stats –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∏–∫ (username).
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = db.get_user(user_id, chat_id)

    # –ü—Ä–∏–≤–æ–¥–∏–º username –∫ –≤–∏–¥—É '@username' –∏–ª–∏ None
    nick = f"@{username}" if username else None

    if not user:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        db.add_or_update_user(user_id, chat_id, user_name, sits=0, punished=0, sex=None, nick=nick)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è
        needs_update = False
        if user["name"] != user_name:
            needs_update = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∫
        db_nick = user.get("nick")
        if db_nick != nick:
            needs_update = True

        if needs_update:
            db.add_or_update_user(
                user_id,
                chat_id,
                user_name,
                sits=user.get("sits", 0),
                punished=user.get("punished", 0),
                sex=user.get("sex"),
                nick=nick
            )

    # Daily_stats: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    today = datetime.now().date()
    for i in range(7):
        day_date = today - timedelta(days=i)
        if not db.get_daily_stats(user_id, day_date.isoformat()):
            db.add_or_update_daily_stats(
                user_id,
                chat_id,
                day_date.isoformat(),
                messages=0,
                words=0,
                chars=0,
                stickers=0,
                coffee=0
            )

    # Total_stats
    if not db.get_total_stats(user_id, chat_id):
        db.add_or_update_total_stats(user_id, chat_id, messages=0, words=0, chars=0, stickers=0, coffee=0)


from datetime import datetime
from datetime import date
import logging
import db  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ db.py –¥–æ—Å—Ç—É–ø–Ω—ã

def update_stats(chat_id, user_id, user_name, message, chat_name=None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î.
    –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∏–∫–µ—Ä ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 'stickers'.
    –ò–Ω–∞—á–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º messages/words/chars –∫–∞–∫ —Ä–∞–Ω—å—à–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º username (–Ω–∏–∫)
    username = message.from_user.username
    nick = f"@{username}" if username else None

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    add_or_update_user(user_id, chat_id, user_name, nick=nick)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É —Å–µ–≥–æ–¥–Ω—è
    today_str = date.today().isoformat()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–º
    is_sticker = getattr(message, "sticker", None) is not None

    if is_sticker:
        # –µ—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞–∫–æ–≤ ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
        if message.sticker and message.sticker.set_name in TRACKED_STICKERPACKS:
            increment_sticker_stats(
                chat_id=message.chat.id,
                file_id=message.sticker.file_id,
                set_name=message.sticker.set_name,
                date_str=date.today().isoformat()
            )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∏–∫–µ—Ä—ã
        increment_daily_stats(user_id, chat_id, today_str, stickers=1)
        increment_total_stats(user_id, chat_id, stickers=1)
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–≤–µ—Å—Ç–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã
        asyncio.create_task(update_quest_progress(user_id, chat_id, "stickers_sent", 1, bot))

        if not chat_name:
            chat_name = chat_id

        sticker = message.sticker
        sticker_info = (
            f"file_id: {sticker.file_id}, "
            f"emoji: {sticker.emoji}, "
            f"set_name: {sticker.set_name}, "
            f"—Ä–∞–∑–º–µ—Ä: {sticker.width}x{sticker.height}, "
            f"–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {sticker.is_animated}, "
            f"–≤–∏–¥–µ–æ: {sticker.is_video}"
        )
        logging.info(
            f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —á–∞—Ç \"{chat_name}\", –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}, +1 —Å—Ç–∏–∫–µ—Ä | {sticker_info}"
        )

    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç / –ø–æ–¥–ø–∏—Å—å / –º–µ–¥–∏–∞
        text = getattr(message, "text", None) or getattr(message, "caption", None)
        if text:
            words = len(text.split())
            chars = len(text)
        else:
            words = 1
            chars = 1

        increment_daily_stats(user_id, chat_id, today_str, messages=1, words=words, chars=chars)
        increment_total_stats(user_id, chat_id, messages=1, words=words, chars=chars)
        asyncio.create_task(update_quest_progress(user_id, chat_id, "messages_sent", 1, bot))

        if not chat_name:
            chat_name = chat_id

        logging.info(
            f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —á–∞—Ç \"{chat_name}\", –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}, +1 —Å–æ–æ–±—â–µ–Ω–∏–µ, +{words} —Å–ª–æ–≤, +{chars} —Å–∏–º–≤–æ–ª–æ–≤"
        )


from contextlib import closing
from db import get_connection

def find_user_id_by_nick(chat_id: int, nick: str) -> int | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id –ø–æ –Ω–∏–∫—É (@nick) –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞, –ª–∏–±–æ None."""
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM users WHERE chat_id = ? AND nick = ?", (chat_id, nick))
        row = cur.fetchone()
        return row[0] if row else None



async def daily_punish_task():
    """
    –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:45 –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã:
    –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å punished==1 ‚Äî —É–º–µ–Ω—å—à–∞–µ—Ç –≤–¥–≤–æ–µ daily –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ total,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –≤ —á–∞—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç punished.
    """
    while True:
        now = datetime.now()
        punish_time = now.replace(hour=22, minute=45, second=0, microsecond=0)
        if now >= punish_time:
            punish_time += timedelta(days=1)

        wait_seconds = (punish_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –Ω–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with closing(get_connection()) as conn:
            cur = conn.cursor()
            cur.execute("SELECT user_id, chat_id FROM users WHERE punished=1")
            punished_users = cur.fetchall()

        for row in punished_users:
            user_id = row["user_id"]
            chat_id = row["chat_id"]

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é daily-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            today_str = datetime.now().strftime("%Y-%m-%d")
            daily = get_daily_stats(user_id, chat_id, today_str)
            if not daily:
                continue

            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è –ø–æ–ª–æ–≤–∏–Ω—ã
            dm = daily["messages"] // 2
            dw = daily["words"] // 2
            dc = daily["chars"] // 2
            ds = daily["stickers"] // 2
            # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ -1 –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ increment
            increment_daily_stats(user_id, chat_id, today_str,
                                  messages=-dm, words=-dw, chars=-dc, stickers=-ds)

            increment_total_stats(user_id, chat_id,
                                  messages=-dm, words=-dw, chars=-dc, stickers=-ds)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º punished
            with closing(get_connection()) as conn:
                cur = conn.cursor()
                cur.execute("UPDATE users SET punished=0 WHERE user_id=? AND chat_id=?", (user_id, chat_id))
                conn.commit()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç
            name = get_user(user_id, chat_id)["name"] or str(user_id)
            try:
                await bot.send_message(chat_id,
                    f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —à—Ç—Ä–∞—Ñ—ã –∑–∞ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–æ—Ñ–µ:\n"
                    f"{name}: -{dm} —Å–æ–æ–±—â–µ–Ω–∏–π, -{dw} —Å–ª–æ–≤, -{dc} —Å–∏–º–≤–æ–ª–æ–≤, -{ds} —Å—Ç–∏–∫–µ—Ä–æ–≤"
                )
            except Exception as e:
                logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —à—Ç—Ä–∞—Ñ–∞—Ö –≤ —á–∞—Ç {chat_id}: {e}")


# ---------- –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ç–æ–ø-3 ----------

async def daily_reward_task():
    while True:
        now = datetime.now()
        reward_time = now.replace(hour=23, minute=45, second=0, microsecond=0)

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ–∑–∂–µ 23:55, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if now >= reward_time:
            reward_time += timedelta(days=1)

        wait_seconds = (reward_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
        await reward_daily_top(bot)


# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------

@dp.message(Command("weeklytop"))
async def weekly_top(message: types.Message):
    chat_id = message.chat.id

    users = get_chat_users(chat_id)  # –æ–∂–∏–¥–∞–µ—Ç—Å—è: list[sqlite3.Row] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    if not users:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    totals = []
    for user_row in users:
        user = dict(user_row)  # sqlite3.Row -> dict
        uid = int(user["user_id"])
        # –ü–µ—Ä–µ–¥–∞—ë–º chat_id
        daily = get_last_7_daily_stats(uid, chat_id, days=7)
        week_msgs = sum(d["messages"] for d in daily)
        name = user.get("name") or "Unknown"
        punished = int(user.get("punished") or 0)
        totals.append((week_msgs, uid, name, punished))

    totals.sort(reverse=True, key=lambda x: x[0])

    text = "üèÜ –¢–æ–ø-10 –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for i, (count, uid, name, punished) in enumerate(totals[:10], 1):
        display_name = f"{name} ‚ò†Ô∏è" if punished else name
        text += f"{i}. {display_name} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await message.reply(text)



@dp.message(Command("totaltop"))
async def total_top(message: types.Message):
    chat_id = message.chat.id
    users = get_chat_users(chat_id)
    if not users:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    totals = []
    for user in users:
        uid = user["user_id"]
        total = get_total_stats(uid, chat_id)
        total_msgs = int(total["messages"]) if total else 0
        name = user["name"] or "Unknown"
        punished = int(user["punished"] or 0)
        totals.append((total_msgs, uid, name, punished))

    totals.sort(reverse=True, key=lambda x: x[0])

    text = "üìä –¢–æ–ø-10 –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
    for i, (count, uid, name, punished) in enumerate(totals[:10], 1):
        display_name = f"{name} ‚ò†Ô∏è" if punished else name
        text += f"{i}. {display_name} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await message.reply(text)



from datetime import date, timedelta

@dp.message(Command("flood"))
async def flood_stats(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    users = get_chat_users(chat_id)
    if not users:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–±–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–∞
    if not any(int(u["user_id"]) == user_id for u in users):
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–±–µ.")
        return

    # –¥–Ω–∏ –¥–ª—è –Ω–µ–¥–µ–ª–∏
    today = date.today()
    # –ø–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    week_totals = []
    for urow in users:
        u = dict(urow)
        uid = int(u["user_id"])
        daily = get_last_7_daily_stats(uid, chat_id, days=7)
        week_msgs = sum(d["messages"] for d in daily)
        week_totals.append((week_msgs, uid))

    week_totals.sort(reverse=True, key=lambda x: x[0])
    week_position = next((i + 1 for i, (_, uid) in enumerate(week_totals) if uid == user_id), None)
    week_msgs = next((w for w, uid in week_totals if uid == user_id), 0)

    # –æ–±—â–µ–µ —Ç–æ–ø-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
    total_list = []
    for urow in users:
        uid = int(urow["user_id"])
        total = get_total_stats(uid, chat_id)
        total_msgs = int(total["messages"] or 0) if total else 0
        total_list.append((total_msgs, uid))
    total_list.sort(reverse=True, key=lambda x: x[0])
    total_position = next((i + 1 for i, (_, uid) in enumerate(total_list) if uid == user_id), None)
    total_msgs = next((t for t, uid in total_list if uid == user_id), 0)

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_row = get_user(user_id, chat_id)
    user = dict(user_row) if user_row else {}
    name = user.get("name") or message.from_user.full_name
    if int(user.get("punished", 0) or 0):
        name = f"{name} ‚ò†Ô∏è"

    # –ö–æ—Ñ–µ –±–µ—Ä–µ–º –∏–∑ total_stats
    total_stats = get_total_stats(user_id, chat_id)
    total_coffee = int(total_stats["coffee"] or 0) if total_stats else 0

    # –ë–∞–ª–∞–Ω—Å sits
    sits_balance = int(user.get("sits") or 0)

    text = (
        f"üìà –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {name}:\n"
        f"–ó–∞ –Ω–µ–¥–µ–ª—é: {week_msgs} —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ—Å—Ç–æ #{week_position})\n"
        f"–í—Å–µ–≥–æ: {total_msgs} —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ—Å—Ç–æ #{total_position})"
    )
    text += f"\n‚òïÔ∏è –í—Å–µ–≥–æ –∫–æ—Ñ–µ: {total_coffee}"
    if sits_balance > 0:
        text += f"\nüí¶ –ë–∞–ª–∞–Ω—Å —Å–∏—Ç–∞: {sits_balance}"

    await message.reply(text)




@dp.message(Command("shop"))
async def show_shop(message: types.Message):
    balance = get_sits(message.chat.id, message.from_user.id)
    await message.answer(
        "üè™ –ú–∞–≥–∞–∑–∏–Ω—á–∏–∫ –î—è–¥–∏ –î–æ–∫—Ç–æ—Ä–∞\n"
        f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} —Å–∏—Ç\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–æ–≤–∞—Ä:",
        reply_markup=build_shop_keyboard()
    )


@dp.message(Command("makovka"))
async def send_makovka(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä.
    """
    await message.answer_sticker(MAKOVKA_FILE_ID)

from chat_stat import get_weekly_chat_stats
from aiogram import types
from aiogram.filters import Command

@dp.message(Command("stat"))
async def send_stat(message: types.Message):
    chat_id = message.chat.id
    await message.answer(get_weekly_chat_stats(chat_id))


import random

# –°–ø–∏—Å–æ–∫ ID —Å—Ç–∏–∫–µ—Ä–æ–≤
STICKERS = [
    "CAACAgIAAyEFAASjKavKAAICp2iy5hML1eFnIZwuKLpEpl9kmpfjAALwcAACZfRISVXIMpVstJbWNgQ",
    "CAACAgIAAyEFAASjKavKAAICqGiy5ik08bQH5g9omzfd7PBs7Z9WAALuPQACkhZpSxMWB6aTq90jNgQ",
    "CAACAgIAAyEFAASjKavKAAICqmiy5kLEuAKILCRckR7jDGGBM74QAAJJBQACIwUNAAEQwqY-etbwdDYE",
    "CAACAgIAAyEFAASjKavKAAICrWiy5mJIsVI1nVFUa-7JsyIol_hKAALLTgACphTRSjS9R-8OrOiBNgQ"
]
#–ù–∞–≥—Ä–∞–¥–∞ –í–∏—Ç–∞–ª–∏–∫—É –∑–∞ –∫–∞–∂–¥—ã–µ 300 —Å—Ç–∏–∫–µ—Ä–æ–≤
async def send_reaction_reward(bot: Bot, chat_id: int, user_id: int, total: int):
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
    sticker_id = random.choice(STICKERS)

    await bot.send_sticker(chat_id, sticker_id)
    await bot.send_message(
        chat_id,
        f"üéâ @Thehemyl –í–∏—Ç–∞–ª–∏–∫, –¥–µ—Ä–∂–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ –ª–∞–π–∫–∏ ‚ù§Ô∏è",
        parse_mode="Markdown"
    )

from aiogram.filters import Command
from aiogram.types import Message

@dp.message(Command("regenerate"))
async def regenerate_usernames(message: Message):
    with get_connection() as conn:
        cur = conn.cursor()
        # –ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º –≤ —Ç–∞–±–ª–∏—Ü–µ users
        cur.execute("SELECT user_id, chat_id FROM users")
        rows = cur.fetchall()
        for row in rows:
            user_id, chat_id = row
            try:
                member = await bot.get_chat_member(chat_id, user_id)
                full_name = member.user.full_name
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
                cur.execute("UPDATE users SET name=? WHERE user_id=? AND chat_id=?", (full_name, user_id, chat_id))
            except Exception:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        conn.commit()
    await message.answer("–ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")


# --- –ú–µ–Ω—é –ª–∞–π–∫–æ–≤ ---
def build_likes_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–¢–æ–ø –∑–∞–ª–∞–π–∫–∞–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="likes:weekly_top")],
        [InlineKeyboardButton(text="–¢–æ–ø –∑–∞–ª–∞–π–∫–∞–Ω—ã—Ö –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="likes:alltime_top")],
        [InlineKeyboardButton(text="–¢–æ–ø –¥–æ–±—Ä—è–∫–æ–≤ –Ω–µ–¥–µ–ª–∏", callback_data="likes:weekly_givers")],
        [InlineKeyboardButton(text="–¢–æ–ø –¥–æ–±—Ä—è–∫–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="likes:alltime_givers")],
        [InlineKeyboardButton(text="–¢–æ–ø-5 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–µ–ª–∏", callback_data="likes:weekly_msgs")],
        [InlineKeyboardButton(text="–¢–æ–ø-5 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="likes:alltime_msgs")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞", callback_data="likes:chat_stats")],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.message(Command("top_stickers"))
async def top_stickers(message: types.Message):
    chat_id = message.chat.id

    # –ø–∞—Ä—Å–∏–º –ª–∏–º–∏—Ç: /top_stickers 42 -> 42, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5
    args = message.text.strip().split()
    try:
        limit = int(args[1]) if len(args) > 1 else 5
    except ValueError:
        limit = 5
    limit = max(1, min(limit, 100))  # –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –∫—Ä–∞–π–Ω–æ—Å—Ç–µ–π

    # –¥–æ—Å—Ç–∞—ë–º —Ç–æ–ø N, —Å—É–º–º–∏—Ä—É—è —Å—á—ë—Ç—á–∏–∫–∏ –ø–æ –≤—Å–µ–º –¥–∞—Ç–∞–º
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT file_id, SUM(count) as total_count
            FROM sticker_stats
            WHERE chat_id = ?
            GROUP BY file_id
            ORDER BY total_count DESC, file_id ASC
            LIMIT ?
        """, (chat_id, limit))
        rows = cur.fetchall()

    if not rows:
        await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º —Å—Ç–∏–∫–µ—Ä–∞–º.")
        return

    await message.answer(f"üèÜ –¢–æ–ø-{len(rows)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ (–ø–æ–¥–ø–∏—Å—å ‚Üí —Å—Ç–∏–∫–µ—Ä):")

    # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ: —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç-¬´–ø–æ–¥–ø–∏—Å—å¬ª, –∑–∞—Ç–µ–º —Å—Ç–∏–∫–µ—Ä –∫–∞–∫ reply –Ω–∞ –Ω–µ—ë
    for i, (file_id, total_count) in enumerate(rows, start=1):
        caption_msg = await message.answer(f"{i}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {total_count} —Ä–∞–∑(–∞)")
        try:
            await message.bot.send_sticker(
                chat_id=chat_id,
                sticker=file_id,
                reply_to_message_id=caption_msg.message_id
            )
        except Exception:
            await message.answer(f"(–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä {file_id})")


@dp.message(Command("like"))
async def cmd_like(message: Message):
    await message.answer(
        "‚ù§Ô∏è –°–∞–º–∞—è –¥–æ–±—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ –≤–∞—à–∏ –ª–∞–π–∫–∏ ‚ù§Ô∏è",
        reply_markup=build_likes_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –ª–∞–π–∫–æ–≤ ---
@dp.callback_query(F.data.startswith("likes:"))
async def likes_menu_callback(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    data = callback_query.data

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    try:
        await callback_query.message.delete()
    except Exception:
        pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    text = ""
    with get_connection() as conn:
        cur = conn.cursor()

        if data == "likes:weekly_top":
            cur.execute("""
                SELECT u.name, SUM(d.react_taken) as likes
                FROM users u
                JOIN daily_stats d ON u.user_id = d.user_id AND u.chat_id = d.chat_id
                WHERE u.chat_id = ? AND d.date >= date('now','-6 days')
                GROUP BY u.user_id
                ORDER BY likes DESC
                LIMIT 10
            """, (chat_id,))
            rows = cur.fetchall()
            text = "üèÜ –¢–æ–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ª–∞–π–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
            text += "\n".join([f"{i + 1}. {name} ‚Äî {likes} ‚ù§Ô∏è" for i, (name, likes) in enumerate(rows)])

        elif data == "likes:alltime_top":
            cur.execute("""
                SELECT u.name, t.react_taken
                FROM total_stats t
                JOIN users u ON u.user_id = t.user_id AND u.chat_id = t.chat_id
                WHERE t.chat_id = ?
                ORDER BY t.react_taken DESC
                LIMIT 10
            """, (chat_id,))
            rows = cur.fetchall()
            text = "üèÜ –¢–æ–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ª–∞–π–∫–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
            text += "\n".join([f"{i + 1}. {name} ‚Äî {likes} ‚ù§Ô∏è" for i, (name, likes) in enumerate(rows)])


        elif data == "likes:weekly_givers":
            cur.execute("""
                SELECT u.name, SUM(d.react_given) as likes
                FROM users u
                JOIN daily_stats d ON u.user_id = d.user_id AND u.chat_id = d.chat_id
                WHERE u.chat_id = ? AND d.date >= date('now','-6 days')
                GROUP BY u.user_id
                ORDER BY likes DESC
                LIMIT 10
            """, (chat_id,))
            rows = cur.fetchall()
            text = "üíñ –¢–æ–ø –¥–æ–±—Ä—è–∫–æ–≤ –Ω–µ–¥–µ–ª–∏:\n"
            text += "\n".join([f"{i + 1}. {name} ‚Äî {likes} ‚ù§Ô∏è" for i, (name, likes) in enumerate(rows)])

        elif data == "likes:alltime_givers":
            cur.execute("""
                SELECT u.name, t.react_given
                FROM total_stats t
                JOIN users u ON u.user_id = t.user_id AND u.chat_id = t.chat_id
                WHERE t.chat_id = ?
                ORDER BY t.react_given DESC
                LIMIT 10
            """, (chat_id,))
            rows = cur.fetchall()
            text = "üíñ –¢–æ–ø –¥–æ–±—Ä—è–∫–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
            text += "\n".join([f"{i + 1}. {name} ‚Äî {likes} ‚ù§Ô∏è" for i, (name, likes) in enumerate(rows)])

        elif data == "likes:weekly_msgs":
            cur.execute("""
                SELECT message_id, reactions_count, message_text
                FROM messages_reactions
                WHERE chat_id = ? AND date >= date('now','-6 days')
                ORDER BY reactions_count DESC
                LIMIT 5
            """, (chat_id,))
            rows = cur.fetchall()
            text = "üí¨ –¢–æ–ø-5 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–µ–ª–∏:\n"
            for message_id, react_taken, msg_text in rows:
                link = f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"
                snippet = (msg_text[:50] + "...") if msg_text else ""
                text += f"‚ù§Ô∏è {react_taken} ‚Äî {link} ‚Äî {snippet}\n"

        elif data == "likes:alltime_msgs":
            cur.execute("""
                SELECT message_id, reactions_count, message_text
                FROM messages_reactions
                WHERE chat_id = ?
                ORDER BY reactions_count DESC
                LIMIT 5
            """, (chat_id,))
            rows = cur.fetchall()
            text = "üí¨ –¢–æ–ø-5 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
            for message_id, react_taken, msg_text in rows:
                link = f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"
                snippet = (msg_text[:50] + "...") if msg_text else ""
                text += f"‚ù§Ô∏è {react_taken} ‚Äî {link} ‚Äî {snippet}\n"

        elif data == "likes:chat_stats":
            cur.execute("""
                SELECT SUM(react_taken) as week_likes, SUM(messages) as week_msgs
                FROM daily_stats
                WHERE chat_id = ? AND date >= date('now','-6 days')
            """, (chat_id,))
            week_likes, week_msgs = cur.fetchone()
            week_avg = week_likes / week_msgs if week_msgs else 0

            cur.execute("""
                SELECT SUM(react_taken) as all_likes, SUM(messages) as all_msgs
                FROM total_stats
                WHERE chat_id = ?
            """, (chat_id,))
            all_likes, all_msgs = cur.fetchone()
            all_avg = all_likes / all_msgs if all_msgs else 0

            text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\n"
                f"–ó–∞ –Ω–µ–¥–µ–ª—é: {week_likes} –ª–∞–π–∫–æ–≤, —Å—Ä. –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {week_avg:.2f}\n"
                f"–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {all_likes} –ª–∞–π–∫–æ–≤, —Å—Ä. –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {all_avg:.2f}"
            )
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    await bot.send_message(chat_id, text)
    # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ –æ—Ç–ø—É—Å—Ç–∏–ª–∞—Å—å
    await callback_query.answer()


@dp.message(Command("charity"))
async def charity_command(message: types.Message):
    import logging
    from db import get_user_display_name

    admin_ids = [6010666986, 884940984, 749027951]  # –∫—Ç–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É

    caller_id = message.from_user.id
    logging.info(f"[charity] –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {caller_id} ({message.from_user.username})")

    if caller_id not in admin_ids:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ–Ω–∞—Ç–∞")
        return

    args = message.text.strip().split()
    logging.info(f"[charity] –ü–æ–ª—É—á–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")

    if len(args) < 3:
        await message.answer("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å user_id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Ç–æ–≤.\n–ü—Ä–∏–º–µ—Ä: /charity 884940984 50")
        return

    try:
        target_user_id = int(args[1])
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    try:
        amount = int(args[2])
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ù–∞—á–∏—Å–ª—è–µ–º —Å–∏—Ç—ã
    add_sits(message.chat.id, target_user_id, amount)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    target_name = get_user_display_name(target_user_id, message.chat.id)

    await message.answer(f"–°–ø–∞—Å–∏–±–æ {target_name} –∑–∞ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ! {amount} —Å–∏—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–æ")
    logging.info(f"[charity] –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Å–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({target_name})")




@dp.message(Command("give"))
async def handle_give(message: types.Message):
    chat_id = message.chat.id
    sender_id = message.from_user.id

    parts = (message.text or "").split()
    if len(parts) < 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give @nick amount\n–ü—Ä–∏–º–µ—Ä: /give @vasya 3")
        return

    nick_raw = parts[1].strip()
    amount_raw = parts[2].strip()

    if not nick_raw.startswith("@") or len(nick_raw) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
        return

    try:
        amount = int(amount_raw)
    except ValueError:
        await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
        return

    if amount < 0:
        await message.answer("üö´ –ù–µ—Ç, –º—ã –∑–∞–∫—Ä—ã–ª–∏ —ç—Ç—É –¥—ã—Ä—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        return
    if amount == 0:
        await message.answer("‚ÑπÔ∏è –ù–æ–ª—å —Å–∏—Ç? –û–ø–µ—Ä–∞—Ü–∏—è –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–≤–æ–∂—É.")
        return

    receiver_id = find_user_id_by_nick(chat_id, nick_raw)
    if receiver_id is None:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –∑–∞–ø–æ–º–Ω–∏–ª –Ω–∏–∫."
        )
        return

    if receiver_id == sender_id:
        await message.answer("ü§î –°–∞–º–æ–º—É —Å–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–º—ã—Å–ª–∞ –Ω–µ—Ç.")
        return

    from sosalsa import get_sits, add_sits
    balance = get_sits(chat_id, sender_id)
    if balance < amount:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç. –ù—É–∂–Ω–æ: {amount}, —É —Ç–µ–±—è: {balance}")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º/–Ω–∞—á–∏—Å–ª—è–µ–º
    add_sits(chat_id, sender_id, -amount)
    add_sits(chat_id, receiver_id, amount)

    sender_name = get_user_display_name(sender_id, chat_id)
    receiver_name = get_user_display_name(receiver_id, chat_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≥–æ–ª –ø–æ –ø–æ–ª—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_sex = get_user_sex(sender_id, chat_id)
    verb = "–ø–µ—Ä–µ–¥–∞–ª–∞" if sender_sex == "f" else "–ø–µ—Ä–µ–¥–∞–ª"

    await message.answer(
        f"‚úÖ {sender_name} {verb} {amount} —Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_name} {nick_raw}."
    )


# -----------------------------
# /all ‚Äî —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ—Ö
# -----------------------------
@dp.message(Command("all"))
async def cmd_all(message: types.Message):
    chat_id = message.chat.id
    user_name = message.from_user.full_name

    try:
        with closing(get_connection()) as conn:
            cur = conn.cursor()
            cur.execute("""
                SELECT nick
                FROM users
                WHERE chat_id = ? AND nick IS NOT NULL AND nick != '' AND is_all != 0
            """, (chat_id,))
            rows = cur.fetchall()

        if not rows:
            await message.answer("–ù–∏–∫–æ–≥–æ –µ—â—ë –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –∫–æ–º–∞–Ω–¥–æ–π /addme")
            return

        nicks = " ".join([row[0] for row in rows])
        text = (
            f"{user_name} —Ä–µ—à–∏–ª –≤—Å–µ—Ö —Å–æ–±—Ä–∞—Ç—å!\n"
            f"{nicks}\n\n"
            "–•–æ—á–µ—à—å —á—Ç–æ–±—ã —Ç–µ–±—è —Ç–æ–∂–µ –∑–≤–∞–ª–∏ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π? –ü–∏—à–∏ /addme\n"
            "–•–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞? –ñ–º–∏ /deleteme"
        )
        await message.answer(text)

    except Exception as e:
        logging.exception(f"[all_users] –û—à–∏–±–∫–∞ –≤ /all: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /all.")


# -----------------------------
# /addme ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è
# -----------------------------
@dp.message(Command("addme"))
async def cmd_addme(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    try:
        user = get_user(user_id, chat_id)
        if user is None:
            add_or_update_user(user_id, chat_id, name=message.from_user.full_name, sits=0, is_all=1)
        else:
            add_or_update_user(user_id, chat_id, name=user["name"], sits=user["sits"], nick=user.get("nick", ""), is_all=1)

        await message.answer("‚úÖ –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /all!")

    except Exception as e:
        logging.exception(f"[all_users] –û—à–∏–±–∫–∞ –≤ /addme: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫.")


# -----------------------------
# /deleteme ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
# -----------------------------
@dp.message(Command("deleteme"))
async def cmd_deleteme(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    try:
        user = get_user(user_id, chat_id)
        if user is None:
            await message.answer("‚ùå –¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
            return

        add_or_update_user(user_id, chat_id, name=user["name"], sits=user["sits"], nick=user.get("nick", ""), is_all=0)
        await message.answer("‚úÖ –¢—ã —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /all!")

    except Exception as e:
        logging.exception(f"[all_users] –û—à–∏–±–∫–∞ –≤ /deleteme: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞.")






# ------------------------------
# –ö–æ–≥–¥–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# ------------------------------
@dp.message()
async def handle_message(message: types.Message):

    if message.text and message.text.startswith("/"):
        return

    if not (message.text or message.sticker or message.photo or message.video or message.voice or message.animation):
        return

    chat_name = message.chat.title if message.chat.type in ["group", "supergroup"] else message.chat.id

    # –ü–µ—Ä–µ–¥–∞—ë–º –≤ —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    update_stats(
        chat_id=message.chat.id,
        user_id=message.from_user.id,
        user_name=message.from_user.full_name,
        message=message,
        chat_name=chat_name
    )

    # ---- –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π ----
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT OR IGNORE INTO messages_reactions
            (chat_id, message_id, user_id, message_text, reactions_count, date)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (
            message.chat.id,
            message.message_id,
            message.from_user.id,
            message.text or "",
            0,
            message.date.isoformat()
        ))
        conn.commit()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏—à–µ –º—É–∂–ª–æ
    await handle_mujlo_message(message)


from datetime import date

# ------------------------------
# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω—è–µ—Ç —Å–≤–æ–∏ —Ä–µ–∞–∫—Ü–∏–∏
# ------------------------------
@dp.message_reaction()
async def on_reaction(event: MessageReactionUpdated):
    chat_id = event.chat.id
    msg_id = event.message_id
    user_id = event.user.id if event.user else None

    old = [r.type for r in event.old_reaction] if event.old_reaction else []
    new = [r.type for r in event.new_reaction] if event.new_reaction else []

    logging.info(
        f"–í —á–∞—Ç–µ '{event.chat.title or '–ª–∏—á–Ω—ã–π —á–∞—Ç'}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.user.full_name if event.user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} "
        f"–ø–æ–º–µ–Ω—è–ª —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {new} (—Å—Ç–∞—Ä—ã–µ: {old})"
    )

    if not user_id:
        return  # –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    delta_given = len(new) - len(old)   # —Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–∫—Ü–∏–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–ª–∏ —Å–Ω—è—Ç–æ
    today = date.today()

    with get_connection() as conn:
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        cur.execute(
            "SELECT user_id, reactions_count FROM messages_reactions WHERE chat_id=? AND message_id=?",
            (chat_id, msg_id)
        )
        row = cur.fetchone()
        if not row:
            logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
            return
        author_id, current_count = row

        # --- –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ ---
        # 1) –°–æ–æ–±—â–µ–Ω–∏–µ
        new_count = current_count + delta_given
        cur.execute(
            "UPDATE messages_reactions SET reactions_count=? WHERE chat_id=? AND message_id=?",
            (new_count, chat_id, msg_id)
        )

        # 2) –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ —É —Ç–æ–≥–æ, –∫—Ç–æ —Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é
        cur.execute("""
            INSERT INTO daily_stats (chat_id, user_id, date, react_given)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(chat_id, user_id, date) DO UPDATE SET react_given = react_given + ?
        """, (chat_id, user_id, today, delta_given, delta_given))
        cur.execute("""
            INSERT INTO total_stats (chat_id, user_id, react_given)
            VALUES (?, ?, ?)
            ON CONFLICT(chat_id, user_id) DO UPDATE SET react_given = react_given + ?
        """, (chat_id, user_id, delta_given, delta_given))

        #–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏
        asyncio.create_task(update_quest_progress(user_id, chat_id, "likes_given", 1, bot))

        global last_reward_react_given
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ 300 —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        cur.execute("""
            SELECT react_given FROM total_stats
            WHERE chat_id=? AND user_id=?
        """, (chat_id, user_id))
        row = cur.fetchone()
        if row:
            total_react_given = row[0]
            global last_reward_react_given

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω—É–∂–Ω—ã–π, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥, –∏ –Ω–∞–≥—Ä–∞–¥–∞ –µ—â—ë –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∞—Å—å –∑–∞ –Ω–µ–≥–æ
            if user_id == 765591886 and total_react_given % 400 == 0 and total_react_given > last_reward_react_given:
                await send_reaction_reward(bot, chat_id, user_id, total_react_given)
                last_reward_react_given = total_react_given  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Ä–æ–≥

        # 3) –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ —É –∞–≤—Ç–æ—Ä–∞
        cur.execute("""
            INSERT INTO daily_stats (chat_id, user_id, date, react_taken)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(chat_id, user_id, date) DO UPDATE SET react_taken = react_taken + ?
        """, (chat_id, author_id, today, delta_given, delta_given))
        cur.execute("""
            INSERT INTO total_stats (chat_id, user_id, react_taken)
            VALUES (?, ?, ?)
            ON CONFLICT(chat_id, user_id) DO UPDATE SET react_taken = react_taken + ?
        """, (chat_id, author_id, delta_given, delta_given))

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏
        asyncio.create_task(update_quest_progress(author_id, chat_id, "likes_received", 1, bot))

        conn.commit()



# ------------------------------
# –ö–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–æ–Ω–∏–º–Ω—ã–µ)
# ------------------------------
@dp.message_reaction_count()
async def on_reaction_count(event: MessageReactionCountUpdated):
    chat_id = event.chat.id
    msg_id = event.message_id
    total = sum(r.count for r in event.reactions)
    reactions_text = ", ".join(f"{r.type}: {r.count}" for r in event.reactions)

    logging.info(
        f"–í —á–∞—Ç–µ '{event.chat.title or '–ª–∏—á–Ω—ã–π —á–∞—Ç'}' —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏: {reactions_text}. "
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º reactions_count –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("UPDATE messages_reactions SET reactions_count=? WHERE chat_id=? AND message_id=?",
                    (total, chat_id, msg_id))
        conn.commit()

#—Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–∏—Ç–∞
def sit_word(n: int) -> str:
    n = abs(int(n))
    if n % 10 == 1 and n % 100 != 11:
        return "—Å–∏—Ç"
    if n % 10 in (2, 3, 4) and n % 100 not in (12, 13, 14):
        return "—Å–∏—Ç–∞"
    return "—Å–∏—Ç"


def add_sits(chat_id: int, user_id: int, amount: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –≤—ã—á–∏—Ç–∞–µ—Ç —Å–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from db import get_user, add_or_update_user

    user = get_user(user_id, chat_id)
    if user is None:
        # —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç
        add_or_update_user(user_id, chat_id, name="", sits=amount)
    else:
        new_sits = (user["sits"] or 0) + amount
        add_or_update_user(user_id, chat_id, name=user["name"], sits=new_sits)


#–ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–∏—Ç–∞
def get_sits(chat_id: int, user_id: int) -> int:
    from db import get_user
    user = get_user(user_id, chat_id)
    if user and user["chat_id"] == chat_id:
        return user["sits"] or 0
    return 0



def spend_sits(chat_id: int, user_id: int, amount: int) -> tuple[bool, int]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —Å–ø–∏—Å–∞—Ç—å amount —Å–∏—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö: bool, –Ω–æ–≤—ã–π_–∏–ª–∏_—Ç–µ–∫—É—â–∏–π_–±–∞–ª–∞–Ω—Å: int).
    """
    user = get_user(user_id, chat_id)
    if user and user["chat_id"] == chat_id:
        current = user["sits"] or 0
        if current >= amount:
            new_balance = current - amount
            add_or_update_user(user_id, chat_id, user["name"], sits=new_balance)
            return True, new_balance
        else:
            return False, current
    else:
        # —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º, –µ—Å–ª–∏ –Ω–µ—Ç
        add_or_update_user(user_id, chat_id, "", sits=0)
        return False, 0

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ user_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
ADMIN_IDS = {6010666986, 884940984, 749027951}


#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–∏—Ç–∞
def build_shop_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for key, item in SHOP_ITEMS.items():
        buttons.append([InlineKeyboardButton(
            text=f"{item['name']} ({item['price']} —Å–∏—Ç)",
            callback_data=f"shop:buy:{key}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞ ----------
@dp.callback_query(F.data.startswith("shop:buy:"))
async def handle_shop_buy(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name

    item_key = callback.data.split(":")[-1]
    item = SHOP_ITEMS.get(item_key)

    if not item:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    action = item.get("action")
    try:
        if action == "send_spider":
            await action_send_spider(callback, item)
            return
        if action == "drink_coffee":
            await action_drink_coffee(callback, item)
            return
        if action == "group":
            from group import start_group_event
            await callback.message.delete()
            await start_group_event(callback.message, callback.from_user.id)
            return

        price = item["price"]
        ok, new_balance = spend_sits(chat_id, user_id, price)

        if ok:
            buy_text = item["buy_text"].format(user_name=user_name)
            try:
                await callback.message.edit_text(f"{buy_text}\n–û—Å—Ç–∞—Ç–æ–∫: {new_balance} —Å–∏—Ç")
            except Exception as e:
                logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
            logging.info(f"{user_name} –∫—É–ø–∏–ª '{item['name']}' –∑–∞ {price} —Å–∏—Ç –≤ —á–∞—Ç–µ {chat_id}. –û—Å—Ç–∞—Ç–æ–∫: {new_balance}")
            await callback.answer()
        else:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance}", show_alert=True)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.", show_alert=True)


# ---------- –ü–æ–∫—É–ø–∫–∞/–≤—ã–ø–∏–≤–∞–Ω–∏–µ –∫–æ—Ñ–µ ----------
async def action_drink_coffee(callback: types.CallbackQuery, item: dict):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name or str(user_id)

    now = datetime.now()
    today_str = now.strftime("%Y-%m-%d")
    daily = get_daily_stats(user_id, chat_id, today_str)
    n = daily["coffee"] if daily else 0

    try:
        # 0) –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        if 22 <= now.hour:
            await callback.answer(f"–ü–æ—Å–ª–µ 22:00 —Ñ–∏–ª—å—Ç—Ä –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–ª–∏–≤–∞—é—Ç, {user_name} ‚òïÔ∏è‚ùå", show_alert=True)
            return

        user = get_user(user_id, chat_id)
        if user and user["punished"] == 1:
            await callback.answer(f"–î–Ω–æ —É–∂–µ –ø—Ä–æ—Ä–≤–∞–Ω–æ, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ —Ö–≤–∞—Ç–∏—Ç, {user_name}", show_alert=True)
            return

        sex = get_user_sex(user_id, chat_id)

        increment_daily_stats(user_id, chat_id, today_str, coffee=1)
        increment_total_stats(user_id, chat_id, coffee=1)
        n += 1

        buy_text_template = item.get("buy_text")
        if isinstance(buy_text_template, dict):
            base_text = buy_text_template.get("f") if sex == "f" else buy_text_template.get("m")
        else:
            base_text = buy_text_template or "{user_name} –∫—É–ø–∏–ª –≤–µ—â—å"

        coffee_emoji = "‚òïÔ∏è" * n  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫—Ä—É–∂–µ–∫ = —á–∏—Å–ª—É –∫–æ—Ñ–µ
        buy_text = base_text.format(user_name=user_name).replace("‚òïÔ∏è‚òïÔ∏è‚òïÔ∏è", coffee_emoji)

        if n >= 2:
            buy_text += " ...–≤ –∂–∏–≤–æ—Ç–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –±—É—Ä—á–∞—Ç—å"

        try:
            await callback.message.edit_text(buy_text)
        except Exception as e:
            logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")

        # –®–∞–Ω—Å —à—Ç—Ä–∞—Ñ–∞
        punished_now = False
        if n > 2:
            chance = 1 - math.exp(-0.21 * (n - 2))
            punished_now = random.random() < chance

        if punished_now:
            add_or_update_user(user_id, chat_id, user_name, punished=1)
            msg = f"üíÄ –î–Ω–æ –ø—Ä–æ—Ä–≤–∞–Ω–æ! –î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è {user_name} –ø–æ–ª—É—á–∞–µ—Ç —à—Ç—Ä–∞—Ñ ‚Äî –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É"
            await callback.message.answer(msg)
            logging.info(f"{user_name} –ø–æ–ª—É—á–∏–ª —Ñ–ª–∞–≥ punished (–∫–æ—Ñ–µ {n}) –≤ —á–∞—Ç–µ {chat_id}")
            await callback.answer()
            from quest import update_quest_progress
            await update_quest_progress(user_id, chat_id, "coffee_fail", 1, bot=bot)

            return

        if n >= 4:
            add_sits(chat_id, user_id, 1)
            new_bal = get_user(user_id, chat_id)["sits"]
            msg = f"{user_name} –ø–æ–ª—É—á–∏–ª 1 —Å–∏—Ç –∑–∞ —Ñ–∏–ª—å—Ç—Ä. –û—Å—Ç–∞—Ç–æ–∫: {new_bal} —Å–∏—Ç"
            await callback.message.answer(msg)
            if n >= 5:
                asyncio.create_task(update_quest_progress(user_id, chat_id, "coffee_safe", 1, bot))
            return



    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–∏ drink_coffee: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–æ—Ñ–µ.", show_alert=True)
        return

    # ‚úÖ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º callback.answer() –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    await callback.answer()


# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—É–∫–∞ ----------
async def action_send_spider(callback: types.CallbackQuery, item: dict):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name or str(user_id)
    price = int(item.get("price", 0))
    is_tass = (user_name.strip().lower() == "tass") or ((callback.from_user.username or "").lower() == "tass")
    new_balance = None

    try:
        if not is_tass and price > 0:
            ok, new_balance = spend_sits(chat_id, user_id, price)
            if not ok:
                await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {get_sits(chat_id, user_id)}", show_alert=True)
                return

        file_path = item.get("file", "images/spider.jpg")
        if not os.path.isabs(file_path):
            file_path = os.path.join(os.path.dirname(__file__), file_path)

        caption = item.get("buy_text", "{user_name} –∫—É–ø–∏–ª –≤–µ—â—å").format(user_name=user_name)
        if is_tass:
            caption = f"Tass, –¥–ª—è —Ç–µ–±—è —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤—Å–µ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n{caption}"

        photo = FSInputFile(file_path)
        await callback.message.answer_photo(photo, caption=caption)

        if new_balance is None:
            new_balance = get_sits(chat_id, user_id)

        confirmation = f"‚úÖ {user_name}, –≤—ã –∫—É–ø–∏–ª–∏ –ø–∞—É–∫–∞ –∑–∞ {price} {sit_word(price)}. –û—Å—Ç–∞—Ç–æ–∫: {new_balance} —Å–∏—Ç"
        if is_tass:
            confirmation = f"üéÅ {user_name}, –¥–ª—è —Ç–µ–±—è —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±—ã–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º ‚Äî –ø–∞—É–∫ –≤ —á–∞—Ç–µ!"

        try:
            await callback.message.edit_text(confirmation)
        except Exception as e:
            logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")

    except FileNotFoundError:
        logging.exception(f"–§–∞–π–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        if not is_tass and price > 0:
            add_sits(chat_id, user_id, price)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", show_alert=True)
        return
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—É–∫–∞: {e}")
        if not is_tass and price > 0:
            add_sits(chat_id, user_id, price)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
        return

    # ‚úÖ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º callback.answer()
    await callback.answer()


async def reward_daily_top(bot: Bot):
    """
    –ù–∞–≥—Ä–∞–∂–¥–∞–µ—Ç —Ç–æ–ø-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.
    –ù–∞—á–∏—Å–ª—è–µ—Ç —Å–∏—Ç—ã: 1 –º–µ—Å—Ç–æ ‚Äî 2, 2-3 –º–µ—Å—Ç–∞ ‚Äî 1.
    """
    from datetime import date
    today_str = date.today().isoformat()
    from db import get_chat_users, get_daily_stats, get_user, add_or_update_user

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —è–≤–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å chat_id –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤ –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –ë–î
    chat_ids = get_all_chats() # get_all_chats() ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –≤—Å–µ —á–∞—Ç—ã

    for chat_id in chat_ids:
        users = get_chat_users(chat_id)  # list[sqlite3.Row] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
        if not users:
            continue

        user_counts = []
        for user_row in users:
            uid = int(user_row["user_id"])
            user = get_user(uid, chat_id)
            daily = get_daily_stats(uid, chat_id, today_str)
            if not user or not daily:
                continue

            messages = daily["messages"] if daily else 0
            if messages > 0:
                name = user["name"] or str(uid)
                user_counts.append((uid, messages, name))

        if not user_counts:
            continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±–µ—Ä—ë–º —Ç–æ–ø-3
        user_counts.sort(key=lambda x: x[1], reverse=True)
        top3 = user_counts[:3]
        rewards = [2, 1, 1]

        text_lines = ["–ó–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∫–ª–∞–¥ –≤–æ —Ñ–ª—É–¥ –≤ —á—è—Ç–µ –Ω–∞–≥—Ä–∞–∂–¥–∞—é—Ç—Å—è:"]
        for i, (uid, count, name) in enumerate(top3):
            amount = rewards[i]
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Ç—ã
            add_sits(chat_id, uid, amount=amount)
            text_lines.append(f"{i + 1} –º–µ—Å—Ç–æ ‚Äî {name} ‚Äî {amount} —Å–∏—Ç")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        try:
            await bot.send_message(chat_id, "\n".join(text_lines))
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")


# ---------- –ó–∞–ø—É—Å–∫ ----------

weekly_awards.bot = bot
weekly_awards.add_sits = add_sits

# —Å–æ–æ–±—â–µ–Ω–∏—è
dp.message.register(handle_mujlo_message)
# inline-–∫–Ω–æ–ø–∫–∞
dp.callback_query.register(handle_mujlo_buy, lambda c: c.data.startswith("mujlo_buy:"))

async def main():
    asyncio.create_task(daily_reward_task())  # –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ 23:55
    asyncio.create_task(weekly_awards.weekly_awards_task())  # –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    asyncio.create_task(daily_punish_task())  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ –∫–æ—Ñ–µ
    asyncio.create_task(silence_checker_task())
    asyncio.create_task(reset_mujlo_daily()) # —Å–±—Ä–æ—Å –ø–æ–∫—É–ø–æ–∫ –º—É–∂–ª–∞ –ø–æ —É—Ç—Ä—É

    await dp.start_polling(
        bot,
        allowed_updates=["message", "callback_query", "message_reaction", "message_reaction_count"]
    )


if __name__ == "__main__":
    asyncio.run(main())
