import json
import os
import asyncio
import re
from datetime import datetime, time, timedelta
from collections import defaultdict
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
import logging
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import FSInputFile, CallbackQuery
import aiocron
import math
import random


import weekly_awards
import sticker_manager


TOKEN = "7566137789:AAFk7sUaT4qFTV5xGzgO1Lh44hzr4bRU8hQ"
STATS_FILE = "stats.json"
MAKOVKA_FILE_ID = "CAACAgIAAyEFAASjKavKAAOcaJ95ivqdgkA5gstkAbRt25CCRLAAAkN5AAJTNbFKdWJ4ufamt9I2BA"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
SHOP_ITEMS = {
    "piss8": {
        "name": "üí¶ 8 –ª–∏—Ç—Ä–æ–≤ –º–æ—á–∏",
        "price": 8,
        "buy_text": "üí¶ {user_name} –∫—É–ø–∏–ª 8 –ª–∏—Ç—Ä–æ–≤ –º–æ—á–∏ –∏ –∑–∞–±—Ä—ã–∑–≥–∞–ª —á—è—Ç! \nüí¶üí¶üí¶üí¶üí¶üí¶üí¶üí¶"
    },
    "mic1": {
        "name": "üé§ –°–∫–∞–∑–∞—Ç—å –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω",
        "price": 1,
        "buy_text": "üé§ {user_name} –≤–∏–±—Ä–∏—Ä—É–µ—Ç! üé§"
    },
    "spider1": {
        "name": "üï∑ –°–∫–∏–Ω—É—Ç—å –≤ —á–∞—Ç –ø–∞—É–∫–∞ üï∑",
        "price": 1,
        "buy_text": "üï∑ {user_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞—É–∫–∞ –≤ —á–∞—Ç! üï∑",
        "action": "send_spider",
        "file": os.path.join("images", "spider.jpg")  # –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–µ–∫—Ç–∞
    },
    "filtr0": {
        "name": "‚òïÔ∏è –í—ã–ø–∏—Ç—å –∫–æ—Ñ–µ",
        "price": 0,
        "buy_text": "{user_name} —Å–ª–∞–¥–∫–æ –ø–æ–ø–∏–ª —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —É–ª—ã–±–Ω—É–ª—Å—è ‚òïÔ∏è‚òïÔ∏è‚òïÔ∏è",
        "action": "drink_coffee"
    },
    "sticker1000": {
        "name": "üìù –ö—É–ø–∏—Ç—å —Å—Ç–∏–∫–µ—Ä",
        "price": 1000,
        "buy_text": "–í–æ—É –≤–æ—É! {user_name} –≤—ã–ª–æ–∂–∏–ª –∫—Ä—É–≥–ª–µ–Ω—å–∫—É—é —Å—É–º–º—É, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Å—Ç–∏–∫–µ—Ä! \n–ù–∞–ø–∏—à–∏ –º–∏–Ω–∏—Å—Ç—Ä—É —Å—Ç–∏–∫–µ—Ä–æ–≤ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å, –Ω–æ –ø–æ–º–Ω–∏, —á—Ç–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ –Ω–∏–º."
    }
}



logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)


bot = Bot(token=TOKEN)
dp = Dispatcher()

# ---------- –†–∞–±–æ—Ç–∞ —Å JSON ----------

def load_stats():
    if not os.path.exists(STATS_FILE):
        return {}
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_stats(data):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def ensure_user(chat_id, user_id, user_name):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É stats[chat_id][user_id].
    –ü—Ä–∏–≤–æ–¥–∏—Ç daily –∫ –¥–ª–∏–Ω–µ 7 –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª—é—á–∏ 'stickers' –∏ 'coffee' –≤ day –∏ total.
    –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç 'punished' –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = str(chat_id)
    user_id = str(user_id)

    if chat_id not in stats:
        stats[chat_id] = {}
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ {chat_id}")

    if user_id not in stats[chat_id]:
        # –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats[chat_id][user_id] = {
            "name": user_name,
            "daily": [{"messages": 0, "words": 0, "chars": 0, "stickers": 0, "coffee": 0} for _ in range(7)],
            "total": {"messages": 0, "words": 0, "chars": 0, "stickers": 0, "coffee": 0},
            "punished": 0
        }
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID {user_id}) –≤ —á–∞—Ç {chat_id}")
        return

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    user_data = stats[chat_id][user_id]

    # –∏–º—è
    if not user_data.get("name"):
        user_data["name"] = user_name

    # daily: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω—ã 7, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    daily = user_data.get("daily")
    if not isinstance(daily, list):
        daily = [{"messages": 0, "words": 0, "chars": 0, "stickers": 0, "coffee": 0} for _ in range(7)]
    else:
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for i in range(len(daily)):
            day = daily[i] or {}
            day.setdefault("messages", 0)
            day.setdefault("words", 0)
            day.setdefault("chars", 0)
            day.setdefault("stickers", 0)
            day.setdefault("coffee", 0)
            daily[i] = day
        # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ < 7 ‚Äî –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª–µ–≤—ã–º–∏ –≤ –∫–æ–Ω–µ—Ü (—Å—Ç–∞—Ä—ã–µ –¥–Ω–∏ ‚Äî –¥–∞–ª—å—à–µ –ø–æ –º–∞—Å—Å–∏–≤—É)
        if len(daily) < 7:
            for _ in range(7 - len(daily)):
                daily.append({"messages": 0, "words": 0, "chars": 0, "stickers": 0, "coffee": 0})
        # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ > 7 ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 7 (–ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî —Å—Ç–∞—Ä—ã–µ –¥–Ω–∏)
        if len(daily) > 7:
            daily = daily[:7]

    user_data["daily"] = daily

    # total: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
    total = user_data.get("total", {})
    total.setdefault("messages", 0)
    total.setdefault("words", 0)
    total.setdefault("chars", 0)
    total.setdefault("stickers", 0)
    total.setdefault("coffee", 0)
    user_data["total"] = total

    # punished: —Ñ–ª–∞–≥ —à—Ç—Ä–∞—Ñ–∞ (0/1)
    user_data.setdefault("punished", 0)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–∞–¥ (stats ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π)
    stats[chat_id][user_id] = user_data



def migrate_stats_add_fields():
    """
    –ü—Ä–æ–π—Ç–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É stats –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è 'stickers', 'coffee' –≤ daily –∏ total,
    –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ 'punished' –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    """
    changed = False
    for chat_id, users in list(stats.items()):
        for user_id, user_data in list(users.items()):
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º ensure_user, –æ–Ω –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            ensure_user(chat_id, user_id, user_data.get("name", ""))
            changed = True
    if changed:
        save_stats(stats)
        logging.info("–ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è 'stickers', 'coffee', 'punished' –≤ stats (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ).")



stats = load_stats()
migrate_stats_add_fields()

def update_stats(chat_id, user_id, user_name, message, chat_name=None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è message.
    –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∏–∫–µ—Ä ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 'stickers'.
    –ò–Ω–∞—á–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º messages/words/chars –∫–∞–∫ —Ä–∞–Ω—å—à–µ.
    """
    ensure_user(chat_id, user_id, user_name)

    cid = str(chat_id)
    uid = str(user_id)
    user_data = stats[cid][uid]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–º
    is_sticker = getattr(message, "sticker", None) is not None

    if is_sticker:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—á—ë—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤
        user_data["daily"][0]["stickers"] += 1
        user_data["total"]["stickers"] += 1

        # –õ–æ–≥–∏—Ä—É–µ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if not chat_name:
            chat_name = chat_id

        sticker = message.sticker
        sticker_info = (
            f"file_id: {sticker.file_id}, "
            f"emoji: {sticker.emoji}, "
            f"set_name: {sticker.set_name}, "
            f"—Ä–∞–∑–º–µ—Ä: {sticker.width}x{sticker.height}, "
            f"–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {sticker.is_animated}, "
            f"–≤–∏–¥–µ–æ: {sticker.is_video}"
        )

        logging.info(
            f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —á–∞—Ç \"{chat_name}\", –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}, +1 —Å—Ç–∏–∫–µ—Ä | {sticker_info}"
        )


    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç / –ø–æ–¥–ø–∏—Å—å / –º–µ–¥–∏–∞ –∫–∞–∫ —Ä–∞–Ω—å—à–µ (–º–µ–¥–∏–∞ = 1 —Å–ª–æ–≤–æ / 1 —Å–∏–º–≤–æ–ª)
        text = ""
        if getattr(message, "text", None):
            text = message.text
        elif getattr(message, "caption", None):
            text = message.caption

        if text:
            words = len(text.split())
            chars = len(text)
        else:
            # –º–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (photo, video, voice, animation –∏ —Ç.–ø.)
            words = 1
            chars = 1

        user_data["daily"][0]["messages"] += 1
        user_data["daily"][0]["words"] += words
        user_data["daily"][0]["chars"] += chars

        user_data["total"]["messages"] += 1
        user_data["total"]["words"] += words
        user_data["total"]["chars"] += chars

        if not chat_name:
            chat_name = chat_id
        logging.info(
            f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —á–∞—Ç \"{chat_name}\", –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}, +1 —Å–æ–æ–±—â–µ–Ω–∏–µ, +{words} —Å–ª–æ–≤, +{chars} —Å–∏–º–≤–æ–ª–æ–≤"
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_stats(stats)




def shift_daily_stats():
    for chat_id in stats:
        for user_id in stats[chat_id]:
            daily = stats[chat_id][user_id]["daily"]
            # —É–¥–∞–ª–∏—Ç—å —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –¥–µ–Ω—å —Å–ø—Ä–∞–≤–∞ –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –Ω—É–ª–µ–≤–æ–π –≤ –Ω–∞—á–∞–ª–æ
            daily.pop(-1)
            daily.insert(0, {"messages": 0, "words": 0, "chars": 0, "stickers": 0, "coffee": 0})
    save_stats(stats)
    logging.info("–°—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–≤–∏–Ω—É—Ç–∞")



# ---------- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ ----------

async def daily_shift_task():
    while True:
        now = datetime.now()
        tomorrow = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        wait_seconds = (tomorrow - now).total_seconds()
        await asyncio.sleep(wait_seconds)
        shift_daily_stats()

async def daily_punish_task():
    """
    –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:45 –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã:
    –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å punished==1 ‚Äî —É–º–µ–Ω—å—à–∞–µ—Ç –≤–¥–≤–æ–µ daily[0] (messages/words/chars/stickers),
    –≤—ã—á–∏—Ç–∞–µ—Ç —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–∑ total, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –≤ —á–∞—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç punished.
    """
    while True:
        now = datetime.now()
        punish_time = now.replace(hour=22, minute=45, second=0, microsecond=0)
        if now >= punish_time:
            punish_time += timedelta(days=1)

        wait_seconds = (punish_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        # –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ—ã –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        for chat_id, users in list(stats.items()):
            lines = []
            changed = False
            for uid, data in list(users.items()):
                if int(data.get("punished", 0)) != 1:
                    continue

                # —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
                d0 = data.get("daily", [])[0] if data.get("daily") else {"messages":0,"words":0,"chars":0,"stickers":0,"coffee":0}
                m_old = int(d0.get("messages", 0) or 0)
                w_old = int(d0.get("words", 0) or 0)
                c_old = int(d0.get("chars", 0) or 0)
                s_old = int(d0.get("stickers", 0) or 0)

                # –Ω–æ–≤—ã–µ (–ø–æ–ø–æ–ª–∞–º, —Ü–µ–ª—ã–µ)
                m_new = m_old // 2
                w_new = w_old // 2
                c_new = c_old // 2
                s_new = s_old // 2

                dm = m_old - m_new
                dw = w_old - w_new
                dc = c_old - c_new
                ds = s_old - s_new

                # –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                data["daily"][0]["messages"] = m_new
                data["daily"][0]["words"] = w_new
                data["daily"][0]["chars"] = c_new
                data["daily"][0]["stickers"] = s_new

                # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ total (–Ω–µ –æ–ø—É—Å–∫–∞–µ–º –Ω–∏–∂–µ 0)
                data["total"]["messages"] = max(0, int(data["total"].get("messages", 0)) - dm)
                data["total"]["words"] = max(0, int(data["total"].get("words", 0)) - dw)
                data["total"]["chars"] = max(0, int(data["total"].get("chars", 0)) - dc)
                data["total"]["stickers"] = max(0, int(data["total"].get("stickers", 0)) - ds)

                # —Å–Ω–∏–º–∞–µ–º –º–µ—Ç–∫—É punished
                data["punished"] = 0

                save_stats(stats)
                changed = True
                name = data.get("name", str(uid))
                lines.append(f"{name}: -{dm} —Å–æ–æ–±—â–µ–Ω–∏–π, -{dw} —Å–ª–æ–≤, -{dc} —Å–∏–º–≤–æ–ª–æ–≤, -{ds} —Å—Ç–∏–∫–µ—Ä–æ–≤")

            if changed:
                try:
                    await bot.send_message(chat_id, "–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —à—Ç—Ä–∞—Ñ—ã –∑–∞ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–æ—Ñ–µ:\n" + "\n".join(lines))
                except Exception as e:
                    logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —à—Ç—Ä–∞—Ñ–∞—Ö –≤ —á–∞—Ç {chat_id}: {e}")



# ---------- –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ç–æ–ø-3 ----------

async def daily_reward_task():
    while True:
        now = datetime.now()
        reward_time = now.replace(hour=23, minute=55, second=0, microsecond=0)

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ–∑–∂–µ 23:55, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if now >= reward_time:
            reward_time += timedelta(days=1)

        wait_seconds = (reward_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
        await reward_daily_top(bot)


# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------


@dp.message(Command("weeklytop"))
async def weekly_top(message: types.Message):
    chat_id = str(message.chat.id)
    if chat_id not in stats:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    totals = []
    for user_id, data in stats[chat_id].items():
        week_msgs = sum(day.get("messages", 0) for day in data.get("daily", []))
        totals.append((week_msgs, user_id))
    totals.sort(reverse=True, key=lambda x: x[0])

    text = "üèÜ –¢–æ–ø-10 –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for i, (count, uid) in enumerate(totals[:10], 1):
        data = stats[chat_id][uid]
        name = data.get("name", "Unknown")
        if int(data.get("punished", 0)):
            name = f"{name} ‚ò†Ô∏è"
        text += f"{i}. {name} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await message.reply(text)


@dp.message(Command("totaltop"))
async def total_top(message: types.Message):
    chat_id = str(message.chat.id)
    if chat_id not in stats:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    totals = []
    for user_id, data in stats[chat_id].items():
        totals.append((int(data.get("total", {}).get("messages", 0) or 0), user_id))
    totals.sort(reverse=True, key=lambda x: x[0])

    text = "üìä –¢–æ–ø-10 –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
    for i, (count, uid) in enumerate(totals[:10], 1):
        data = stats[chat_id][uid]
        name = data.get("name", "Unknown")
        if int(data.get("punished", 0)):
            name = f"{name} ‚ò†Ô∏è"
        text += f"{i}. {name} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await message.reply(text)


@dp.message(Command("flood"))
async def flood_stats(message: types.Message):
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)

    if chat_id not in stats or user_id not in stats[chat_id]:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–±–µ.")
        return

    data = stats[chat_id][user_id]

    # –ü–æ–¥—Å—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
    week_msgs = sum(day.get("messages", 0) for day in data.get("daily", []))
    week_sorted = sorted(
        stats[chat_id].items(),
        key=lambda item: sum(d.get("messages", 0) for d in item[1].get("daily", [])),
        reverse=True
    )
    week_position = next(
        (i + 1 for i, (uid, _) in enumerate(week_sorted) if uid == user_id),
        None
    )

    # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ —Ç–æ–ø–∞
    total_sorted = sorted(
        stats[chat_id].items(),
        key=lambda item: int(item[1].get("total", {}).get("messages", 0) or 0),
        reverse=True
    )
    total_position = next(
        (i + 1 for i, (uid, _) in enumerate(total_sorted) if uid == user_id),
        None
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    name = data.get("name", message.from_user.full_name)
    if int(data.get("punished", 0)):
        name = f"{name} ‚ò†Ô∏è"

    text = (
        f"üìà –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {name}:\n"
        f"–ó–∞ –Ω–µ–¥–µ–ª—é: {week_msgs} —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ—Å—Ç–æ #{week_position})\n"
        f"–í—Å–µ–≥–æ: {data.get('total', {}).get('messages', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ—Å—Ç–æ #{total_position})"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ñ–µ
    total_coffee = int(data.get("total", {}).get("coffee", 0) or 0)
    text += f"\n‚òïÔ∏è –í—Å–µ–≥–æ –∫–æ—Ñ–µ: {total_coffee}"

    # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å —Å–∏—Ç–∞
    sits_balance = data.get("sits", 0)
    if sits_balance > 0:
        text += f"\nüí¶ –ë–∞–ª–∞–Ω—Å —Å–∏—Ç–∞: {sits_balance}"

    await message.reply(text)


@dp.message(Command("shop"))
async def show_shop(message: types.Message):
    balance = get_sits(message.chat.id, message.from_user.id)
    await message.answer(
        "üè™ –ú–∞–≥–∞–∑–∏–Ω—á–∏–∫ –î—è–¥–∏ –î–æ–∫—Ç–æ—Ä–∞\n"
        f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} —Å–∏—Ç\n\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–æ–≤–∞—Ä:",
        reply_markup=build_shop_keyboard()
    )

@dp.message(Command("addsit"))
async def add_sit_command(message: types.Message):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addsit N (N ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0)")
        return

    try:
        amount = int(parts[1])
    except ValueError:
        await message.reply("N –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    if amount <= 0:
        await message.reply("N –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    add_sits(message.chat.id, message.from_user.id, amount)
    new_balance = get_sits(message.chat.id, message.from_user.id)
    await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Å–∏—Ç. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}")

@dp.message(Command("makovka"))
async def send_makovka(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä.
    """
    await message.answer_sticker(MAKOVKA_FILE_ID)

from chat_stat import get_weekly_chat_stats
from aiogram import types
from aiogram.filters import Command

@dp.message(Command("stat"))
async def send_stat(message: types.Message):
    chat_id = message.chat.id
    await message.answer(get_weekly_chat_stats(chat_id))



@dp.message()
async def handle_message(message: types.Message):
    # 0) –≤—Å–µ–≥–¥–∞ –æ—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã –∏ –ª—é–±—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π)
    try:
        sticker_manager.note_activity(message.chat.id, message.date)
    except Exception:
        logging.exception("note_activity failed")

    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith("/"):
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –º–µ–¥–∏–∞
    if not (message.text or message.sticker or message.photo or message.video or message.voice or message.animation):
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
    chat_name = message.chat.title if message.chat.type in ["group", "supergroup"] else message.chat.id

    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ update_stats
    update_stats(
        chat_id=message.chat.id,
        user_id=message.from_user.id,
        user_name=message.from_user.full_name,
        message=message,
        chat_name=chat_name
    )


#—Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–∏—Ç–∞
def sit_word(n: int) -> str:
    n = abs(int(n))
    if n % 10 == 1 and n % 100 != 11:
        return "—Å–∏—Ç"
    if n % 10 in (2, 3, 4) and n % 100 not in (12, 13, 14):
        return "—Å–∏—Ç–∞"
    return "—Å–∏—Ç"


#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Ç–∞
def add_sits(chat_id, user_id, amount):
    ensure_user(chat_id, user_id, "")  # —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç
    user_data = stats[str(chat_id)][str(user_id)]
    if "sits" not in user_data:
        user_data["sits"] = 0
    user_data["sits"] += amount
    save_stats(stats)

#–ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–∏—Ç–∞
def get_sits(chat_id, user_id):
    if str(chat_id) not in stats or str(user_id) not in stats[str(chat_id)]:
        return 0
    return stats[str(chat_id)][str(user_id)].get("sits", 0)

def spend_sits(chat_id, user_id, amount) -> tuple[bool, int]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —Å–ø–∏—Å–∞—Ç—å amount —Å–∏—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö: bool, –Ω–æ–≤—ã–π_–∏–ª–∏_—Ç–µ–∫—É—â–∏–π_–±–∞–ª–∞–Ω—Å: int).
    """
    chat_id = str(chat_id)
    user_id = str(user_id)

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ensure_user(chat_id, user_id, "")

    current = stats[chat_id][user_id].get("sits", 0)
    if current >= amount:
        stats[chat_id][user_id]["sits"] = current - amount
        save_stats(stats)
        return True, stats[chat_id][user_id]["sits"]
    else:
        return False, current

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–∏—Ç–∞
def build_shop_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for key, item in SHOP_ITEMS.items():
        buttons.append([InlineKeyboardButton(
            text=f"{item['name']} ({item['price']} —Å–∏—Ç)",
            callback_data=f"shop:buy:{key}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.callback_query(F.data.startswith("shop:buy:"))
async def handle_shop_buy(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ç–æ–≤–∞—Ä–∞
    item_key = callback.data.split(":")[-1]
    item = SHOP_ITEMS.get(item_key)

    if not item:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –∑–∞–¥–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ ‚Äî –¥–µ–ª–µ–≥–∏—Ä—É–µ–º
    action = item.get("action")
    if action == "send_spider":
        await action_send_spider(callback, item)
        return
    if action == "drink_coffee":
        await action_drink_coffee(callback, item);
        return

    price = item["price"]
    ok, new_balance = spend_sits(chat_id, user_id, price)

    if ok:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        buy_text = item["buy_text"].format(user_name=user_name)
        await callback.message.edit_text(f"{buy_text}\n–û—Å—Ç–∞—Ç–æ–∫: {new_balance} —Å–∏—Ç")
        logging.info(f"{user_name} –∫—É–ø–∏–ª '{item['name']}' –∑–∞ {price} —Å–∏—Ç –≤ —á–∞—Ç–µ {chat_id}. –û—Å—Ç–∞—Ç–æ–∫: {new_balance}")
        await callback.answer()
    else:
        await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance}", show_alert=True)


async def action_drink_coffee(callback: CallbackQuery, item: dict):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏/–≤—ã–ø–∏–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ (coffee).
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ —à—Ç—Ä–∞—Ñ (punished) –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    - –û–±–Ω–æ–≤–ª—è–µ—Ç daily[0].coffee –∏ total.coffee
    - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à–∞–Ω—Å —à—Ç—Ä–∞—Ñ–∞ –∏ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Å—Ç–∞–≤–∏—Ç punished=1
    - –ü—Ä–∏ n>=3 –¥–æ–±–∞–≤–ª—è–µ—Ç "...–≤ –∂–∏–≤–æ—Ç–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –±—É—Ä—á–∞—Ç—å" –∫ buy_text
    - –ï—Å–ª–∏ n>=4 –∏ –ù–ï –±—ã–ª —à—Ç—Ä–∞—Ñ ‚Äî –Ω–∞—á–∏—Å–ª—è–µ—Ç 1 —Å–∏—Ç —Å—Ä–∞–∑—É–±–ª—è
    """
    chat_id = str(callback.message.chat.id)
    user_id = str(callback.from_user.id)
    user_name = callback.from_user.full_name or callback.from_user.username or str(user_id)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ stats
    ensure_user(chat_id, user_id, user_name)
    user_data = stats[chat_id][user_id]

    # 0) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª —à—Ç—Ä–∞—Ñ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ—Ñ–µ
    if user_data.get("punished", 0) == 1:
        await callback.answer(f"–î–Ω–æ —É–∂–µ –ø—Ä–æ—Ä–≤–∞–Ω–æ, —Ç–µ–±–µ —Ö–≤–∞—Ç–∏—Ç, {user_name}", show_alert=True)
        return

    # 0.1) –ü–æ—Å–ª–µ 22:00 –ø–∏—Ç—å –∫–æ—Ñ–µ –Ω–µ–ª—å–∑—è
    from datetime import datetime
    now = datetime.now()
    if now.hour >= 22:
        await callback.answer(f"–ü–æ—Å–ª–µ 22:00 —Ñ–∏–ª—å—Ç—Ä –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–ª–∏–≤–∞—é—Ç, {user_name} ‚òïÔ∏è‚ùå", show_alert=True)
        return

    # 1) –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –∫–æ—Ñ–µ
    user_data["daily"][0]["coffee"] = int(user_data["daily"][0].get("coffee", 0)) + 1
    user_data["total"]["coffee"] = int(user_data["total"].get("coffee", 0)) + 1
    n = user_data["daily"][0]["coffee"]

    save_stats(stats)

    # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–∫—É–ø–∫–∏
    buy_text = item.get("buy_text", "{user_name} –∫—É–ø–∏–ª –≤–µ—â—å").format(user_name=user_name)
    if n >= 3:
        buy_text += " ...–≤ –∂–∏–≤–æ—Ç–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –±—É—Ä—á–∞—Ç—å"

    # 3) –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–Ω—Å —à—Ç—Ä–∞—Ñ–∞ (—Å —Ç—Ä–µ—Ç—å–µ–≥–æ –∫–æ—Ñ–µ)
    punished_now = False
    if n > 2:
        chance = 1 - math.exp(-0.8 * (n - 2))
        punished_now = random.random() < chance

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(buy_text)
    except Exception as e:
        logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")

    # 5) –ï—Å–ª–∏ —à—Ç—Ä–∞—Ñ –≤—ã–ø–∞–ª
    if punished_now:
        user_data["punished"] = 1
        save_stats(stats)
        await callback.message.answer(
            f"üíÄ –î–Ω–æ –ø—Ä–æ—Ä–≤–∞–Ω–æ! –î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è {user_name} –ø–æ–ª—É—á–∞–µ—Ç —à—Ç—Ä–∞—Ñ –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–¥–≤–æ–µ")
        logging.info(f"{user_name} –ø–æ–ª—É—á–∏–ª —Ñ–ª–∞–≥ punished (–∫–æ—Ñ–µ {n}) –≤ —á–∞—Ç–µ {chat_id}")
        await callback.answer()
        return

    # 6) –ï—Å–ª–∏ –∫–æ—Ñ–µ 4+ –∏ –Ω–µ—Ç —à—Ç—Ä–∞—Ñ–∞ ‚Äî –¥–∞—ë–º 1 —Å–∏—Ç
    if n >= 4:
        add_sits(chat_id, user_id, 1)
        new_bal = get_sits(chat_id, user_id)
        await callback.message.answer(
            f"{user_name} –ø—Ä–µ–∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –æ—Ç –≤—ã–ø–∏—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –ø–æ–ª—É—á–∏–ª 1 —Å–∏—Ç. –û—Å—Ç–∞—Ç–æ–∫: {new_bal} —Å–∏—Ç")

    await callback.answer()


async def action_send_spider(callback: CallbackQuery, item: dict):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—É–∫–∞.
    callback  - CallbackQuery –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.
    item      - –∑–∞–ø–∏—Å—å –∏–∑ SHOP_ITEMS (–¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å price –∏ file).
    """
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name or callback.from_user.username or str(user_id)
    user_username = (callback.from_user.username or "").lower()
    user_name_lc = user_name.strip().lower()

    price = int(item.get("price", 0))
    is_tass = (user_name_lc == "tass") or (user_username == "tass")

    # 1) –ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞—Ç—å —Å–∏—Ç—ã (–µ—Å–ª–∏ –Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
    new_balance = None
    if not is_tass and price > 0:
        ok, new_balance = spend_sits(chat_id, user_id, price)
        if not ok:
            # –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance}", show_alert=True)
            return

    # 2) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    file_path = item.get("file", "images/spider.jpg")
    if not os.path.isabs(file_path):
        file_path = os.path.join(os.path.dirname(__file__), file_path)

    # 3) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    caption = item.get("buy_text", "{user_name} –∫—É–ø–∏–ª –≤–µ—â—å").format(user_name=user_name)
    if is_tass:
        caption = f"Tass, –¥–ª—è —Ç–µ–±—è —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤—Å–µ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n{caption}"

    # 4) –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª; –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ (–µ—Å–ª–∏ —É–∂–µ —Å–ø–∏—Å–∞–ª–∏)
    try:
        photo = FSInputFile(file_path)
        await callback.message.answer_photo(photo, caption=caption)
    except FileNotFoundError:
        logging.exception(f"–§–∞–π–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        if not is_tass and price > 0:
            add_sits(chat_id, user_id, price)  # –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", show_alert=True)
        return
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—É–∫–∞: {e}")
        if not is_tass and price > 0:
            add_sits(chat_id, user_id, price)  # –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
        return

    # 5) –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é
    if new_balance is None:
        # –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏–ª–∏ price==0, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = get_sits(chat_id, user_id)

    if is_tass:
        confirmation = f"üéÅ {user_name}, –¥–ª—è —Ç–µ–±—è —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±—ã–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º ‚Äî –ø–∞—É–∫ –≤ —á–∞—Ç–µ!"
    else:
        confirmation = f"‚úÖ {user_name}, –≤—ã –∫—É–ø–∏–ª–∏ –ø–∞—É–∫–∞ –∑–∞ {price} {sit_word(price)}. –û—Å—Ç–∞—Ç–æ–∫: {new_balance} —Å–∏—Ç"

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞–≥–∞–∑–∏–Ω–æ–º (—ç—Ç–æ —É–±–µ—Ä—ë—Ç –∫–Ω–æ–ø–∫–∏)
        await callback.message.edit_text(confirmation)
    except Exception as e:
        logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")

    # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer()

#–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ç–æ–ø-3 —Å–∏—Ç–æ–º
async def reward_daily_top(bot: Bot):
    for chat_id, users in stats.items():
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        sorted_users = sorted(
            users.items(),
            key=lambda item: item[1]["daily"][0]["messages"],
            reverse=True
        )

        top3 = sorted_users[:3]
        if not top3 or top3[0][1]["daily"][0]["messages"] == 0:
            continue  # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è

        rewards = [2, 1, 1]
        text_lines = ["–ó–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∫–ª–∞–¥ –≤–æ —Ñ–ª—É–¥ –≤ —á—è—Ç–µ –Ω–∞–≥—Ä–∞–∂–¥–∞—é—Ç—Å—è:"]

        for i, (user_id, data) in enumerate(top3):
            amount = rewards[i]
            add_sits(chat_id, user_id, amount)
            text_lines.append(f"{i+1} –º–µ—Å—Ç–æ ‚Äî {data['name']} ‚Äî {amount} —Å–∏—Ç")

        try:
            await bot.send_message(chat_id, "\n".join(text_lines))
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")


# ---------- –ó–∞–ø—É—Å–∫ ----------

weekly_awards.bot = bot
weekly_awards.stats = stats
weekly_awards.add_sits = add_sits

# –°–æ–æ–±—â–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä—É ¬´—Ç–∏—Ö–∏—Ö¬ª —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
sticker_manager.seed_known_chats_from_stats(stats)



async def main():
    asyncio.create_task(daily_reward_task())  # –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ 23:55
    asyncio.create_task(daily_shift_task())
    asyncio.create_task(weekly_awards.weekly_awards_task())  # –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    asyncio.create_task(sticker_manager.silence_checker_task(bot))
    asyncio.create_task(daily_punish_task())  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ –∫–æ—Ñ–µ

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
