# –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ ¬´–¢–∏—à–µ,–º—É–∂–ª–æ, –ø–æ—Ä–∞ —Å–ø–∞—Ç—å!¬ª –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏ –∏ –¥–æ 5 —É—Ç—Ä–∞ –≤ —á–∞—Ç –ø–∏—à–µ—Ç –º—É–∂–ª–æ
# –ú—É–∂–ª–æ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∫—É–ø—Ç–∏—å —Å–≤–æ–±–æ–¥—É –≥–æ–ª–æ—Å–∞ –∑–∞ 2 —Å–∏—Ç–∞, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É

import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import types, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import get_connection, add_or_update_user, get_user
# –∏–ª–∏ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot —á–µ—Ä–µ–∑ –æ–±—â–∏–π –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å

MUJLO = "CAACAgIAAyEFAASixe81AAEBo3posMDwzO10nION2l0m2Rzk7L_UJAACcl4AAq0s-Uufvzuo1oaf2jYE"

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
_last_mujlo_sent: dict[tuple[int, int], datetime] = {}  # –∫–ª—é—á (chat_id, user_id) -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞

async def handle_mujlo_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è MUJLO-—Å—Ç–∏–∫–µ—Ä–∞."""

    try:
        now = datetime.now()
        hour = now.hour
        if not (22 <= hour or hour < 3):
            return  # —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É 22:00 –∏ 03:00

        chat_id = message.chat.id
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with get_connection() as conn:
            cur = conn.cursor()
            cur.execute("SELECT sex FROM users WHERE chat_id = ? AND user_id = ?", (chat_id, user_id))
            row = cur.fetchone()
            if not row or row["sex"] != "m":
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç 3 –º–∏–Ω—É—Ç—ã
        last_time = _last_mujlo_sent.get((chat_id, user_id))
        if last_time and (now - last_time) < timedelta(minutes=3):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –Ω–æ—á–∏
        with get_connection() as conn:
            cur = conn.cursor()
            cur.execute("SELECT mujlo_freed FROM mujlo WHERE chat_id=? AND user_id=?", (chat_id, user_id))
            mujlo_row = cur.fetchone()
            if mujlo_row and mujlo_row["mujlo_freed"]:
                return

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ + –∫–Ω–æ–ø–∫–∏ ---
        kb = InlineKeyboardBuilder()
        kb.button(
            text="–ö—É–ø–∏—Ç—å –ø—Ä–∞–≤–æ –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è (2 —Å–∏—Ç–∞)",
            callback_data=f"mujlo_buy:{chat_id}:{user_id}"
        )
        kb.adjust(1)

        await message.answer_sticker(MUJLO, reply_to_message_id=message.message_id)
        await message.answer("üò∂", reply_markup=kb.as_markup())

        _last_mujlo_sent[(chat_id, user_id)] = now

    except Exception as e:
        logging.error(f"[mujlo] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# @dp.callback_query(lambda c: c.data.startswith("mujlo_buy:"))
async def handle_mujlo_buy(callback: types.CallbackQuery):
    chat_id, user_id = map(int, callback.data.split(":")[1:])
    user = get_user(user_id, chat_id)

    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–∏–ª –ª–∏ —É–∂–µ –ø—Ä–∞–≤–æ
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT mujlo_freed FROM mujlo WHERE chat_id=? AND user_id=?", (chat_id, user_id))
        row = cur.fetchone()
        if row and row["mujlo_freed"]:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫—É–ø–∏–ª –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å!", show_alert=True)
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å
            await callback.message.edit_reply_markup(reply_markup=None)
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∏—Ç
    if user["sits"] < 2:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∞–≤–∞.", show_alert=True)
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–∏—Ç–∞ –∏ –ø–æ–º–µ—á–∞–µ–º –ø—Ä–∞–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã–º
    add_or_update_user(user_id, chat_id, user["name"], sits=user["sits"] - 2)
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("UPDATE mujlo SET mujlo_freed=1 WHERE chat_id=? AND user_id=?", (chat_id, user_id))
        conn.commit()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await callback.message.edit_reply_markup(reply_markup=None)  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ")
