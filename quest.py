# quest.py
import sqlite3
import logging
from contextlib import closing
from datetime import date
from typing import Optional

from db import get_connection, get_user_display_name
from sosalsa import add_sits
from aiogram import Bot  # –¥–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from aiogram.filters import Command

# ==============================
# –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê
# ==============================

def update_quest_progress(user_id: int, chat_id: int, quest_type: str, increment: int = 1, bot: Optional[Bot] = None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param chat_id: ID —á–∞—Ç–∞
    :param quest_type: —Ç–∏–ø –∫–≤–µ—Å—Ç–∞ (messages_sent, stickers_sent, likes_given, likes_received –∏ —Ç.–¥.)
    :param increment: –Ω–∞—Å–∫–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    :param bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    today = date.today().isoformat()

    with closing(get_connection()) as conn:
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("""
            SELECT uq.id, uq.quest_id, uq.progress, qc.target, qc.reward
            FROM user_quests uq
            JOIN quests_catalog qc ON uq.quest_id = qc.quest_id
            WHERE uq.user_id = ? AND uq.chat_id = ? AND uq.date_taken = ? AND uq.status = 'active'
        """, (user_id, chat_id, today))
        row = cur.fetchone()

        if not row:
            return  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        uq_id, quest_id, progress, target, reward = row

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–≤–µ—Å—Ç–∞
        cur.execute("SELECT quest_type FROM quests_catalog WHERE id = ?", (quest_id,))
        quest_type_db = cur.fetchone()[0]

        if quest_type_db != quest_type:
            return  # –≠—Ç–æ—Ç –∫–≤–µ—Å—Ç –Ω–µ –ø—Ä–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        new_progress = progress + increment
        cur.execute("UPDATE user_quests SET progress = ? WHERE id = ?", (new_progress, uq_id))
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if new_progress >= target:
            complete_quest(user_id, chat_id, uq_id, reward, bot)


# ==============================
# –ó–ê–í–ï–†–®–ï–ù–ò–ï –ö–í–ï–°–¢–ê
# ==============================

def complete_quest(user_id: int, chat_id: int, uq_id: int, reward: int, bot: Optional[Bot] = None):
    """–û—Ç–º–µ—á–∞–µ—Ç –∫–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º, –≤—ã–¥–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∏ —à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç."""
    with closing(get_connection()) as conn:
        cur = conn.cursor()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cur.execute("""
            UPDATE user_quests SET status = 'completed'
            WHERE id = ?
        """, (uq_id,))
        conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = get_user_display_name(user_id, chat_id)

    # –í—ã–¥–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É
    add_sits(chat_id, user_id, reward)

    # –õ–æ–≥
    logging.info(f"–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {user_name} (user_id={user_id}) –ø–æ–ª—É—á–∏–ª {reward} —Å–∏—Ç")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    if bot:
        import asyncio
        asyncio.create_task(
            bot.send_message(chat_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! {user_name} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–≤–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏–ª {reward} —Å–∏—Ç!")
        )


# quest.py
import random
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from contextlib import closing
from datetime import date

from db import get_connection

# ==========================
# –£—Ç–∏–ª–∏—Ç—ã
# ==========================

def get_user_daily_quest(user_id: int, chat_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å."""
    today = date.today().isoformat()
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT uq.quest_id, uq.progress, qc.description, qc.target, qc.reward
            FROM user_quests uq
            JOIN quests_catalog qc ON uq.quest_id = qc.quest_id
            WHERE uq.user_id = ? AND uq.chat_id = ? AND uq.date_taken = ? AND uq.status = 'active'
        """, (user_id, chat_id, today))
        return cur.fetchone()


def get_random_quests(count=3):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞."""
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute("SELECT id, description, target, reward FROM quests_catalog")
        quests = cur.fetchall()
    return random.sample(quests, min(count, len(quests)))


def assign_quest(user_id: int, chat_id: int, quest_id: int):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –∫–≤–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    today = date.today().isoformat()
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO user_quests (user_id, chat_id, quest_id, date_taken, status, progress)
            VALUES (?, ?, ?, ?, 'active', 0)
        """, (user_id, chat_id, quest_id, today))
        conn.commit()


# ==========================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# ==========================
def register_quest_handlers(dp):
    @dp.message(Command(commands=["quest"]))
    async def cmd_quest(message: types.Message):
        user_id = message.from_user.id
        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç
        quest = get_user_daily_quest(user_id, chat_id)
        if quest:
            quest_id, progress, description, target, reward = quest
            await message.answer(
                f"üìú –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç:\n"
                f"‚Äî {description}\n"
                f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{target}\n"
                f"üèÜ –ù–∞–≥—Ä–∞–¥–∞: {reward} —Å–∏—Ç"
            )
            return

        # –í—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞
        quests = get_random_quests(3)
        kb = InlineKeyboardBuilder()
        for q in quests:
            q_id, description, target, reward = q
            kb.button(
                text=f"{description} (üèÜ {reward})",
                callback_data=f"quest_pick:{q_id}"
            )
        kb.adjust(1)

        await message.answer("üéØ –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb.as_markup())


    @dp.callback_query(lambda c: c.data.startswith("quest_pick:"))
    async def on_quest_pick(query: types.CallbackQuery):
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        quest_id = int(query.data.split(":")[1])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–≤–µ—Å—Ç —É–∂–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
        if get_user_daily_quest(user_id, chat_id):
            await query.answer("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –∫–≤–µ—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!", show_alert=True)
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–≤–µ—Å—Ç
        assign_quest(user_id, chat_id, quest_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with closing(get_connection()) as conn:
            cur = conn.cursor()
            cur.execute("SELECT description, target, reward FROM quests_catalog WHERE id = ?", (quest_id,))
            quest = cur.fetchone()

        if quest:
            description, target, reward = quest
            await query.message.answer(
                f"‚úÖ –ö–≤–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç:\n"
                f"‚Äî {description}\n"
                f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{target}\n"
                f"üèÜ –ù–∞–≥—Ä–∞–¥–∞: {reward} —Å–∏—Ç"
            )
        await query.answer("–ö–≤–µ—Å—Ç –≤—ã–±—Ä–∞–Ω!")