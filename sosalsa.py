# sosalsa.py
import random
from datetime import datetime, timedelta
from contextlib import closing
from aiogram import types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import get_connection, get_user_sex

# ==========================
# –ñ–ï–ù–ê–¢–´–ï –ü–ê–†–´ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö)
# ==========================
MARRIED_PAIRS = [
    (749027951, 884940984),
]

# ==========================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ==========================

def increment_sosalsa(chat_id: int, u1: int, u2: int, shpeh: bool = False):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ —Å–æ—Å–∞–Ω–∏—è –∏–ª–∏ —à–ø—ë—Ö–∞ –¥–ª—è –ø–∞—Ä—ã (u1, u2)."""
    user_id1, user_id2 = sorted([u1, u2])
    column = "shpehalsa_count" if shpeh else "sosalsa_count"

    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute(f"""
            INSERT INTO sosalsa_stats (chat_id, user_id1, user_id2, {column})
            VALUES (?, ?, ?, 1)
            ON CONFLICT(chat_id, user_id1, user_id2)
            DO UPDATE SET {column} = {column} + 1
        """, (chat_id, user_id1, user_id2))
        conn.commit()


def get_top_pairs(chat_id: int, shpeh: bool = False, limit: int = 10):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –ø–∞—Ä –ø–æ —Å–æ—Å–∞–Ω–∏—é –∏–ª–∏ —à–ø—ë—Ö—É."""
    column = "shpehalsa_count" if shpeh else "sosalsa_count"
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute(f"""
            SELECT user_id1, user_id2, {column}
            FROM sosalsa_stats
            WHERE chat_id = ? AND {column} > 0
            ORDER BY {column} DESC
            LIMIT ?
        """, (chat_id, limit))
        return cur.fetchall()


def get_active_users(chat_id: int, days: int = 7):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ user_id –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π,
    —É –∫–æ—Ç–æ—Ä—ã—Ö messages > 0 —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –¥–Ω–µ–π."""
    date_threshold = (datetime.now() - timedelta(days=days)).date().isoformat()
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT DISTINCT user_id
            FROM daily_stats
            WHERE chat_id = ? AND date >= ? AND messages > 0
        """, (chat_id, date_threshold))
        return [row[0] for row in cur.fetchall()]



def get_random_active_user(chat_id: int, buyer_id: int):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–∫–ª—é—á–∞—è –∂–µ–Ω–∞—Ç—ã–µ –ø–∞—Ä—ã –∏ —Å–µ–±—è."""
    active_users = get_active_users(chat_id)
    candidates = []

    for uid in active_users:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–±—è
        if uid == buyer_id:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–µ–Ω–∞—Ç—ã–µ –ø–∞—Ä—ã: –µ—Å–ª–∏ buyer –∏–ª–∏ uid –≤ MARRIED_PAIRS, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
        in_pair = None
        for u1, u2 in MARRIED_PAIRS:
            if buyer_id in (u1, u2):
                in_pair = (u1, u2)
                break

        if in_pair:
            # –ï—Å–ª–∏ buyer –≤ –ø–∞—Ä–µ, –ø–∞—Ä—Ç–Ω—ë—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–æ–π
            if uid in in_pair:
                candidates.append(uid)
        else:
            # –ï—Å–ª–∏ buyer –Ω–µ –≤ –ø–∞—Ä–µ, –∏—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∏–∑ –ø–∞—Ä
            if any(uid in pair for pair in MARRIED_PAIRS):
                continue
            candidates.append(uid)

    return random.choice(candidates) if candidates else None


def get_possible_shpeh_partners(chat_id: int, buyer_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è —à–ø—ë—Ö–∞ (>=3 —Å–æ—Å–∞–Ω–∏–π) –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö."""
    active_users = set(get_active_users(chat_id))
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT user_id1, user_id2, sosalsa_count
            FROM sosalsa_stats
            WHERE chat_id = ? AND sosalsa_count >= 3
        """, (chat_id,))
        candidates = set()
        for u1, u2, _ in cur.fetchall():
            if buyer_id in (u1, u2):
                partner = u1 if u2 == buyer_id else u2
                if partner in active_users:
                    candidates.add(partner)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∂–µ–Ω–∞—Ç—ã–º –ø–∞—Ä–∞–º
    filtered = []
    for uid in candidates:
        in_pair = None
        for u1, u2 in MARRIED_PAIRS:
            if buyer_id in (u1, u2):
                in_pair = (u1, u2)
                break

        if in_pair:
            if uid in in_pair:
                filtered.append(uid)
        else:
            if any(uid in pair for pair in MARRIED_PAIRS):
                continue
            filtered.append(uid)

    return filtered

def get_user_stats(chat_id: int, user_id: int, shpeh: bool = False):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    column = "shpehalsa_count" if shpeh else "sosalsa_count"
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute(f"""
            SELECT user_id1, user_id2, {column}
            FROM sosalsa_stats
            WHERE chat_id = ? AND {column} > 0 AND (user_id1 = ? OR user_id2 = ?)
            ORDER BY {column} DESC
        """, (chat_id, user_id, user_id))
        return cur.fetchall()


# ==========================
# INLINE-–ú–ï–ù–Æ
# ==========================

def get_sos_menu():
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(
            text="üíã –†–∞–Ω–¥–æ–º–Ω–æ –ø–æ—Å–æ—Å–∞—Ç—å—Å—è (2 —Å–∏—Ç–∞)",
            callback_data="sos_random"
        )
    )
    kb.row(
        types.InlineKeyboardButton(
            text="üî• –†–∞–Ω–¥–æ–º–Ω–æ –ø–æ—à–ø—ë—Ö–∞—Ç—å—Å—è (5 —Å–∏—Ç–æ–≤)",
            callback_data="shpeh_random"
        )
    )
    kb.row(
        types.InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å–∞–Ω–∏—è",
            callback_data="sos_stats"
        )
    )
    kb.row(
        types.InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–ø—ë—Ö–∞",
            callback_data="shpeh_stats"
        )
    )
    kb.row(
        types.InlineKeyboardButton(
            text="üë§ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å–∞–Ω–∏—è",
            callback_data="my_sos_stats"
        )
    )
    kb.row(
        types.InlineKeyboardButton(
            text="üë§ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–ø—ë—Ö–∞",
            callback_data="my_shpeh_stats"
        )
    )
    return kb.as_markup()


def get_user_display_name(user_id: int, chat_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id."""
    with closing(get_connection()) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT name
            FROM users
            WHERE user_id = ? AND chat_id = ?
        """, (user_id, chat_id))
        row = cur.fetchone()

    if row and row[0]:
        return row[0]
    return str(user_id)  # fallback


# ==========================
# –°–ò–¢–´
# ==========================

def add_sits(chat_id: int, user_id: int, amount: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –≤—ã—á–∏—Ç–∞–µ—Ç —Å–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from db import get_user, add_or_update_user

    user = get_user(user_id, chat_id)
    if user is None:
        add_or_update_user(user_id, chat_id, name="", sits=amount)
    else:
        new_sits = (user["sits"] or 0) + amount
        add_or_update_user(user_id, chat_id, name=user["name"], sits=new_sits)


def get_sits(chat_id: int, user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from db import get_user
    user = get_user(user_id, chat_id)
    if user and user["chat_id"] == chat_id:
        return user["sits"] or 0
    return 0


# ==========================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
# ==========================

def register_sos_handlers(dp):
    @dp.message(Command("sos"))
    async def sos_command(message: types.Message):
        await message.answer("–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_sos_menu())

    @dp.callback_query(lambda c: c.data in [
        "sos_random", "shpeh_random",
        "sos_stats", "shpeh_stats",
        "my_sos_stats", "my_shpeh_stats"
    ])
    async def sos_callback(query: types.CallbackQuery):
        action = query.data
        user_id = query.from_user.id
        chat_id = query.message.chat.id

        buyer_name = get_user_display_name(user_id, chat_id)
        buyer_sex = get_user_sex(user_id, chat_id)

        def verb_sos(sex): return "–ø–æ—Å–æ—Å–∞–ª–∞—Å—å" if sex == "f" else "–ø–æ—Å–æ—Å–∞–ª—Å—è"
        def verb_shpeh(sex): return "–ø–æ—à–ø—ë—Ö–∞–ª–∞—Å—å" if sex == "f" else "–ø–æ—à–ø—ë—Ö–∞–ª—Å—è"

        # ----------------------
        # –†–∞–Ω–¥–æ–º–Ω–æ –ø–æ—Å–æ—Å–∞—Ç—å—Å—è
        # ----------------------
        if action == "sos_random":
            cost = 2
            if get_sits(chat_id, user_id) < cost:
                await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
                return

            target_id = get_random_active_user(chat_id, user_id)
            if not target_id:
                await query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!", show_alert=True)
                return

            target_name = get_user_display_name(target_id, chat_id)
            increment_sosalsa(chat_id, user_id, target_id, shpeh=False)
            add_sits(chat_id, user_id, -cost)

            await query.message.answer(f"üíã {buyer_name} {verb_sos(buyer_sex)} —Å {target_name}")

        # ----------------------
        # –†–∞–Ω–¥–æ–º–Ω–æ –ø–æ—à–ø—ë—Ö–∞—Ç—å—Å—è
        # ----------------------
        elif action == "shpeh_random":
            cost = 5
            if get_sits(chat_id, user_id) < cost:
                await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
                return

            partners = get_possible_shpeh_partners(chat_id, user_id)
            if not partners:
                await query.answer("–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å –∫–µ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–æ—Å–∞—Ç—å—Å—è.", show_alert=True)
                return

            target_id = random.choice(partners)
            target_name = get_user_display_name(target_id, chat_id)
            increment_sosalsa(chat_id, user_id, target_id, shpeh=True)
            add_sits(chat_id, user_id, -cost)

            await query.message.answer(f"üî• {buyer_name} {verb_shpeh(buyer_sex)} —Å {target_name}")

        # ----------------------
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å–∞–Ω–∏—è
        # ----------------------
        elif action == "sos_stats":
            rows = get_top_pairs(chat_id, shpeh=False)
            if not rows:
                await query.message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
            else:
                text = "üìä –¢–æ–ø –ø–æ —Å–æ—Å–∞–Ω–∏—é:\n"
                for i, (u1, u2, cnt) in enumerate(rows, 1):
                    name1 = get_user_display_name(u1, chat_id)
                    name2 = get_user_display_name(u2, chat_id)
                    text += f"{i}. {name1} ‚ù§Ô∏è {name2} ‚Äî {cnt} —Ä–∞–∑(–∞)\n"
                await query.message.answer(text)

        # ----------------------
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–ø—ë—Ö–∞
        # ----------------------
        elif action == "shpeh_stats":
            rows = get_top_pairs(chat_id, shpeh=True)
            if not rows:
                await query.message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
            else:
                text = "üìä –¢–æ–ø –ø–æ —à–ø—ë—Ö—É:\n"
                for i, (u1, u2, cnt) in enumerate(rows, 1):
                    name1 = get_user_display_name(u1, chat_id)
                    name2 = get_user_display_name(u2, chat_id)
                    text += f"{i}. {name1} üî• {name2} ‚Äî {cnt} —Ä–∞–∑(–∞)\n"
                await query.message.answer(text)

        # ----------------------
        # –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å–∞–Ω–∏—è
        # ----------------------
        elif action == "my_sos_stats":
            rows = get_user_stats(chat_id, user_id, shpeh=False)
            if not rows:
                await query.message.answer("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å–æ—Å–∞–Ω–∏–π üò¢")
            else:
                text = f"üë§ –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å–∞–Ω–∏—è ({buyer_name}):\n"
                for i, (u1, u2, cnt) in enumerate(rows, 1):
                    partner_id = u2 if u1 == user_id else u1
                    partner_name = get_user_display_name(partner_id, chat_id)
                    text += f"{i}. ‚ù§Ô∏è {partner_name} ‚Äî {cnt} —Ä–∞–∑(–∞)\n"
                await query.message.answer(text)

        # ----------------------
        # –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–ø—ë—Ö–∞
        # ----------------------
        elif action == "my_shpeh_stats":
            rows = get_user_stats(chat_id, user_id, shpeh=True)
            if not rows:
                await query.message.answer("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —à–ø—ë—Ö–∞ üò¢")
            else:
                text = f"üë§ –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–ø—ë—Ö–∞ ({buyer_name}):\n"
                for i, (u1, u2, cnt) in enumerate(rows, 1):
                    partner_id = u2 if u1 == user_id else u1
                    partner_name = get_user_display_name(partner_id, chat_id)
                    text += f"{i}. üî• {partner_name} ‚Äî {cnt} —Ä–∞–∑(–∞)\n"
                await query.message.answer(text)

        await query.answer()
