# weekly_awards.py
import asyncio
from datetime import datetime, timedelta
import logging
import sqlite3
import db
from db import add_or_update_user_achievement
from db import add_or_update_user_achievement, get_achievement_title, get_connection, get_user_sex


bot = None       # —Å—é–¥–∞ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ main.py
stats = None     # —Å—é–¥–∞ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
add_sits = None  # —Å—é–¥–∞ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Ç

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥
WEEKLY_TOP_REWARDS = [10, 7, 5, 3, 3, 2, 2, 2, 2, 2]  # –∑–∞ 1‚Äì10 –º–µ—Å—Ç–∞
ACHIEVEMENT_REWARD = 5  # –∑–∞ –∫–∞–∂–¥—É—é –∞—á–∏–≤–∫—É

async def weekly_awards_task():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 23:00 –ø–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏."""
    while True:
        now = datetime.now()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è 23:00
        days_ahead = 6 - now.weekday()  # weekday(): –ü–Ω=0, –í—Å=6
        if days_ahead < 0:
            days_ahead += 7
        award_time = (now + timedelta(days=days_ahead)).replace(hour=21, minute=5, second=0, microsecond=0)
        if award_time <= now:
            award_time += timedelta(days=7)

        wait_seconds = (award_time - now).total_seconds()
        logging.info(f"[weekly_awards] –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {wait_seconds/3600:.1f} —á–∞—Å–æ–≤ ({award_time})")
        await asyncio.sleep(wait_seconds)

        await process_weekly_awards()


async def process_weekly_awards():
    """–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –Ω–µ–¥–µ–ª–∏ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ SQLite."""
    DB_FILE = "stats.db"  # –ø—É—Ç—å –∫ –±–∞–∑–µ
    try:
        conn = sqlite3.connect(DB_FILE)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö chat_id
        cur.execute("SELECT DISTINCT chat_id FROM users")
        chat_ids = [row["chat_id"] for row in cur.fetchall()]

        for chat_id in chat_ids:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
                cur.execute("""
                    SELECT u.user_id, u.name, u.sits, u.punished,
                           SUM(d.messages) as messages,
                           SUM(d.words) as words,
                           SUM(d.chars) as chars,
                           SUM(d.stickers) as stickers,
                           SUM(d.coffee) as coffee
                    FROM users u
                    JOIN daily_stats d ON u.user_id = d.user_id AND u.chat_id = d.chat_id
                    WHERE u.chat_id = ?
                      AND date(d.date) >= date('now', '-6 days')
                    GROUP BY u.user_id
                """, (chat_id,))
                users_rows = cur.fetchall()

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                users = {}
                for row in users_rows:
                    users[row["user_id"]] = {
                        "name": row["name"],
                        "sits": row["sits"],
                        "punished": row["punished"],
                        "messages": row["messages"],
                        "words": row["words"],
                        "chars": row["chars"],
                        "stickers": row["stickers"],
                        "coffee": row["coffee"]
                    }

                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
                await award_weekly_top(chat_id, users)
                await award_stickerbomber(chat_id, users)
                await award_flooder(chat_id)
                await award_dushnila(chat_id)
                await award_skomrnyashka(chat_id)
                await award_lubimka(chat_id)
                await award_likes_collector(chat_id)
                await award_dobroe_serdtse(chat_id)
                await award_tsarsky_like(chat_id)

            except Exception as e:
                logging.exception(f"[weekly_awards] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ {chat_id}: {e}")

    finally:
        conn.close()


async def award_weekly_top(chat_id, users):
    """–¢–æ–ø-10 —Ñ–ª—É–¥–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏ + –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –∏–∑ –ë–î)."""
    # users ‚Äî —Å–ª–æ–≤–∞—Ä—å {user_id: {name, sits, punished, messages, words, chars, stickers, coffee}}
    totals = [(data["messages"], uid, data["name"]) for uid, data in users.items() if data["messages"] > 0]
    totals.sort(reverse=True, key=lambda x: x[0])
    top10 = totals[:10]

    if not top10:
        return

    lines = ["üèÜ –¢–æ–ø-10 —Ñ–ª—É–¥–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏:"]
    for i, (msgs, uid, name) in enumerate(top10):
        reward = WEEKLY_TOP_REWARDS[i]
        add_sits(chat_id, uid, reward)
        lines.append(f"{i+1}. {name} ‚Äî {msgs} —Å–æ–æ–±—â–µ–Ω–∏–π (+{reward} —Å–∏—Ç)")

    await bot.send_message(chat_id, "\n".join(lines))



async def award_stickerbomber(chat_id, users):
    """–°—Ç–∏–∫–µ—Ä–±–æ–º–±–µ—Ä –Ω–µ–¥–µ–ª–∏ ‚Äî –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é (—É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª)."""


    # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–∏–∫–µ—Ä–æ–≤ > 0
    candidates = [(data["stickers"], uid, data["name"]) for uid, data in users.items() if data["stickers"] > 0]

    if not candidates:
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    candidates.sort(reverse=True, key=lambda x: x[0])
    winner_stickers, winner_id, winner_name = candidates[0]

    # –ù–∞—á–∏—Å–ª—è–µ–º —Å–∏—Ç—ã
    add_sits(chat_id, winner_id, ACHIEVEMENT_REWARD)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    sex = get_user_sex(winner_id, chat_id)
    title = "–°—Ç–∏–∫–µ—Ä–±–æ–º–±–µ—Ä" if sex == "m" else "–°—Ç–∏–∫–µ—Ä–±–æ–º–±–µ—Ä–∫–∞" if sex == "f" else "–°—Ç–∏–∫–µ—Ä–±–æ–º–±–µ—Ä(?)"

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∞—á–∏–≤–∫–µ –≤ —Ç–∞–±–ª–∏—Ü—É user_achievements
    add_or_update_user_achievement(winner_id, chat_id, "sticker_bomber")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"üéØ {title} –Ω–µ–¥–µ–ª–∏ ‚Äî {winner_name} ({winner_stickers} —Å—Ç–∏–∫–µ—Ä–æ–≤)! +{ACHIEVEMENT_REWARD} —Å–∏—Ç"
    await bot.send_message(chat_id, text)




from db import get_user_sex, DB_FILE
import sqlite3

async def award_flooder(chat_id: int):
    """–§–ª—É–¥–µ—Ä –Ω–µ–¥–µ–ª–∏ ‚Äî —Å—Ä–µ–¥–∏ —Ç–æ–ø-10 –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º, –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ chars/messages."""
    conn = sqlite3.connect(DB_FILE)
    try:
        cur = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
        cur.execute("""
            SELECT u.user_id, u.name,
                   SUM(d.messages) as week_msgs,
                   SUM(d.chars) as week_chars
            FROM users u
            JOIN daily_stats d ON u.user_id = d.user_id AND u.chat_id = d.chat_id
            WHERE u.chat_id = ?
              AND d.date >= date('now','-6 days')
            GROUP BY u.user_id
            HAVING week_msgs > 0
            ORDER BY week_msgs DESC
            LIMIT 10
        """, (chat_id,))
        top10 = cur.fetchall()

        if not top10:
            return

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ chars/messages
        ratios = [(week_chars / week_msgs, user_id, name) for user_id, name, week_msgs, week_chars in top10]
        ratios.sort(key=lambda x: x[0])  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        ratio, winner_id, winner_name = ratios[0]

        # –ù–∞—á–∏—Å–ª—è–µ–º —Å–∏—Ç
        add_sits(chat_id, winner_id, ACHIEVEMENT_REWARD)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sex = get_user_sex(winner_id, chat_id)

        # –î–æ—Å—Ç–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏—è –∞—á–∏–≤–∫–∏ –∏–∑ –ë–î
        cur.execute("""
            SELECT name_m, name_f FROM achievements WHERE key = 'fluder'
        """)
        row = cur.fetchone()
        if row:
            name_m, name_f = row
        else:
            name_m, name_f = "–§–ª—É–¥–µ—Ä", "–§–ª—É–¥–µ—Ä–∫–∞"

        if sex == "m":
            title = name_m
        elif sex == "f":
            title = name_f
        else:
            title = f"{name_m}(?)"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        text = f"üí¨ {title} –Ω–µ–¥–µ–ª–∏ ‚Äî {winner_name} (—Å—Ä. –¥–ª–∏–Ω–∞ {ratio:.1f} —Å–∏–º–≤./—Å–æ–æ–±—â.)! +{ACHIEVEMENT_REWARD} —Å–∏—Ç"
        await bot.send_message(chat_id, text)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ user_achievements
        add_or_update_user_achievement(winner_id, chat_id, "fluder")

    finally:
        conn.close()




from db import get_user_sex, DB_FILE
import sqlite3

async def award_dushnila(chat_id: int):
    """–î—É—à–Ω–∏–ª–∞ –Ω–µ–¥–µ–ª–∏ ‚Äî —Å—Ä–µ–¥–∏ —Ç–æ–ø-15 –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º, –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ chars/messages."""
    conn = sqlite3.connect(DB_FILE)
    try:
        cur = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
        cur.execute("""
            SELECT u.user_id, u.name,
                   SUM(d.messages) as week_msgs,
                   SUM(d.chars) as week_chars
            FROM users u
            JOIN daily_stats d ON u.user_id = d.user_id AND u.chat_id = d.chat_id
            WHERE u.chat_id = ?
              AND d.date >= date('now','-6 days')
            GROUP BY u.user_id
            HAVING week_msgs > 0
            ORDER BY week_msgs DESC
            LIMIT 15
        """, (chat_id,))
        top15 = cur.fetchall()

        if not top15:
            return

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ chars/messages
        ratios = [(week_chars / week_msgs, user_id, name) for user_id, name, week_msgs, week_chars in top15]
        ratios.sort(reverse=True, key=lambda x: x[0])  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        ratio, winner_id, winner_name = ratios[0]

        # –ù–∞—á–∏—Å–ª—è–µ–º —Å–∏—Ç
        add_sits(chat_id, winner_id, ACHIEVEMENT_REWARD)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sex = get_user_sex(winner_id, chat_id)

        # –î–æ—Å—Ç–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏—è –∞—á–∏–≤–∫–∏ –∏–∑ –ë–î
        cur.execute("""
            SELECT name_m, name_f FROM achievements WHERE key = 'dushnila'
        """)
        row = cur.fetchone()
        if row:
            name_m, name_f = row
        else:
            name_m, name_f = "–î—É—à–Ω–∏–ª–∞", "–î—É—à–Ω–∏–ª–∞"

        if sex == "m":
            title = name_m
        elif sex == "f":
            title = name_f
        else:
            title = f"{name_m}(?)"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        text = f"üìú {title} –Ω–µ–¥–µ–ª–∏ ‚Äî {winner_name} (—Å—Ä. –¥–ª–∏–Ω–∞ {ratio:.1f} —Å–∏–º–≤./—Å–æ–æ–±—â.)! +{ACHIEVEMENT_REWARD} —Å–∏—Ç"
        await bot.send_message(chat_id, text)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ user_achievements
        add_or_update_user_achievement(winner_id, chat_id, "dushnila")

    finally:
        conn.close()



from db import get_user_sex, DB_FILE
import sqlite3

async def award_skomrnyashka(chat_id: int):
    """–°–∫—Ä–æ–º–Ω—è—à–∫–∞ –Ω–µ–¥–µ–ª–∏ ‚Äî –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ä–µ–¥–∏ —Ç–µ—Ö, —É –∫–æ–≥–æ >= 5 —Å–æ–æ–±—â–µ–Ω–∏–π."""
    conn = sqlite3.connect(DB_FILE)
    try:
        cur = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
        cur.execute("""
            SELECT u.user_id, u.name, SUM(d.messages) as week_msgs
            FROM users u
            JOIN daily_stats d ON u.user_id = d.user_id AND u.chat_id = d.chat_id
            WHERE u.chat_id = ?
              AND d.date >= date('now','-6 days')
            GROUP BY u.user_id
            HAVING week_msgs >= 5
        """, (chat_id,))
        candidates = cur.fetchall()

        if not candidates:
            return

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        candidates.sort(key=lambda x: x[2])  # x[2] = week_msgs
        winner_id, winner_name, week_msgs = candidates[0]

        # –ù–∞—á–∏—Å–ª—è–µ–º —Å–∏—Ç
        add_sits(chat_id, winner_id, ACHIEVEMENT_REWARD)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sex = get_user_sex(winner_id, chat_id)

        # –î–æ—Å—Ç–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏—è –∞—á–∏–≤–∫–∏ –∏–∑ –ë–î
        cur.execute("""
            SELECT name_m, name_f FROM achievements WHERE key = 'skomrnyashka'
        """)
        row = cur.fetchone()
        if row:
            name_m, name_f = row
        else:
            name_m, name_f = "–°–∫—Ä–æ–º–Ω—è—à–µ–∫", "–°–∫—Ä–æ–º–Ω—è—à–∫–∞"

        if sex == "m":
            title = name_m
        elif sex == "f":
            title = name_f
        else:
            title = f"{name_f}(?)"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        text = f"üôà {title} –Ω–µ–¥–µ–ª–∏ ‚Äî {winner_name} ({week_msgs} —Å–æ–æ–±—â–µ–Ω–∏–π)! +{ACHIEVEMENT_REWARD} —Å–∏—Ç"
        await bot.send_message(chat_id, text)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ user_achievements
        add_or_update_user_achievement(winner_id, chat_id, "skromnyashka")

    finally:
        conn.close()

async def award_lubimka(chat_id: int):
    """–õ—é–±–∏–º–∫–∞ –Ω–µ–¥–µ–ª–∏ ‚Äî —é–∑–µ—Ä —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å—Ä–µ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é (‚â•5 —Å–æ–æ–±—â–µ–Ω–∏–π)."""


    with get_connection() as conn:
        cur = conn.cursor()
        # –°—á–∏—Ç–∞–µ–º –ª–∞–π–∫–∏ –∑–∞ 7 –¥–Ω–µ–π
        cur.execute("""
            SELECT u.user_id, u.name,
                   SUM(d.react_taken) as likes_taken,
                   SUM(d.messages) as msgs
            FROM users u
            JOIN daily_stats d ON u.user_id = d.user_id AND u.chat_id = d.chat_id
            WHERE u.chat_id = ?
              AND date(d.date) >= date('now','-6 days')
            GROUP BY u.user_id
            HAVING msgs >= 5
        """, (chat_id,))
        rows = cur.fetchall()

    if not rows:
        return

    # –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ª–∞–π–∫–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    candidates = [(likes_taken / msgs, user_id, name) for user_id, name, likes_taken, msgs in rows if msgs > 0]
    if not candidates:
        return

    candidates.sort(reverse=True, key=lambda x: x[0])
    avg_likes, winner_id, winner_name = candidates[0]

    # –î–æ–±–∞–≤–ª—è–µ–º –∞—á–∏–≤–∫—É
    add_or_update_user_achievement(winner_id, chat_id, "lubimka")

    # –ë–µ—Ä—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ë–î (—É –õ—é–±–∏–º–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –¥–ª—è m/f)
    sex = get_user_sex(winner_id, chat_id)
    title = get_achievement_title("lubimka", sex)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    text = f"üíñ {title} –Ω–µ–¥–µ–ª–∏ ‚Äî {winner_name} (–≤ —Å—Ä–µ–¥–Ω–µ–º {avg_likes:.2f} –ª–∞–π–∫–∞/—Å–æ–æ–±—â–µ–Ω–∏–µ)!"
    await bot.send_message(chat_id, text)



async def award_likes_collector(chat_id: int):
    """–õ–∞–π–∫–æ—Å–±–æ—Ä–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏ ‚Äî –∞–≤—Ç–æ—Ä —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é."""
    DB_FILE = "stats.db"
    conn = sqlite3.connect(DB_FILE)
    try:
        cur = conn.cursor()
        # –ë–µ—Ä—ë–º —Å—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        cur.execute("""
            SELECT u.user_id, u.name, SUM(d.react_taken) as week_likes
            FROM users u
            JOIN daily_stats d ON u.user_id = d.user_id AND u.chat_id = d.chat_id
            WHERE u.chat_id = ?
              AND d.date >= date('now','-6 days')
            GROUP BY u.user_id
            HAVING week_likes > 0
            ORDER BY week_likes DESC
            LIMIT 1
        """, (chat_id,))
        row = cur.fetchone()

        if not row:
            return

        winner_id, winner_name, week_likes = row

        # –¥–æ–±–∞–≤–ª—è–µ–º –∞—á–∏–≤–∫—É
        add_or_update_user_achievement(winner_id, chat_id, "likes_collector")
        add_sits(chat_id, winner_id, ACHIEVEMENT_REWARD)

        # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—á–∏–≤–∫–∏ –∏–∑ –ë–î
        sex = get_user_sex(winner_id, chat_id)
        title = get_achievement_title("likesobornik", sex)

        text = f"üëç {title} –Ω–µ–¥–µ–ª–∏ ‚Äî {winner_name} ({week_likes} –ª–∞–π–∫–æ–≤)! +{ACHIEVEMENT_REWARD} —Å–∏—Ç"
        await bot.send_message(chat_id, text)

    finally:
        conn.close()

async def award_dobroe_serdtse(chat_id: int):
    """–ë–æ–ª—å—à–æ–µ –¥–æ–±—Ä–æ–µ —Å–µ—Ä–¥—Ü–µ –Ω–µ–¥–µ–ª–∏ ‚Äî –ø–æ—Å—Ç–∞–≤–∏–≤—à–∏–π –±–æ–ª—å—à–µ –≤—Å–µ—Ö –ª–∞–π–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é."""
    DB_FILE = "stats.db"
    conn = sqlite3.connect(DB_FILE)
    try:
        cur = conn.cursor()
        # –ë–µ—Ä—ë–º —Å—É–º–º–∞—Ä–Ω—ã–µ –æ—Ç–¥–∞–Ω–Ω—ã–µ –ª–∞–π–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        cur.execute("""
            SELECT u.user_id, u.name, SUM(d.react_given) as week_given
            FROM users u
            JOIN daily_stats d ON u.user_id = d.user_id AND u.chat_id = d.chat_id
            WHERE u.chat_id = ?
              AND d.date >= date('now','-6 days')
            GROUP BY u.user_id
            HAVING week_given > 0
            ORDER BY week_given DESC
            LIMIT 1
        """, (chat_id,))
        row = cur.fetchone()

        if not row:
            return

        winner_id, winner_name, week_given = row

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—á–∏–≤–∫—É
        add_or_update_user_achievement(winner_id, chat_id, "dobroe_serdtse")
        add_sits(chat_id, winner_id, ACHIEVEMENT_REWARD)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—á–∏–≤–∫–∏ –∏–∑ –ë–î
        sex = get_user_sex(winner_id, chat_id)
        title = get_achievement_title("dobroe_serdtse", sex)

        text = f"üíñ {title} –Ω–µ–¥–µ–ª–∏ ‚Äî {winner_name} (–ø–æ—Å—Ç–∞–≤–∏–ª {week_given} –ª–∞–π–∫–æ–≤)! +{ACHIEVEMENT_REWARD} —Å–∏—Ç"
        await bot.send_message(chat_id, text)

    finally:
        conn.close()

async def award_tsarsky_like(chat_id: int):
    """–¶–∞—Ä—Å–∫–∏–π –ª–∞–π–∫ –Ω–µ–¥–µ–ª–∏ ‚Äî —Å–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ç–¥–∞–Ω–Ω—ã—Ö/–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤ —Å—Ä–µ–¥–∏ —Ç–æ–ø-20 –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –ª–∞–π–∫–∞–º."""
    DB_FILE = "stats.db"
    conn = sqlite3.connect(DB_FILE)
    try:
        cur = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –ª–∞–π–∫–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é
        cur.execute("""
            SELECT u.user_id, u.name,
                   SUM(d.react_taken) as week_taken,
                   SUM(d.react_given) as week_given
            FROM users u
            JOIN daily_stats d ON u.user_id = d.user_id AND u.chat_id = d.chat_id
            WHERE u.chat_id = ?
              AND d.date >= date('now','-6 days')
            GROUP BY u.user_id
            HAVING week_taken > 0
            ORDER BY week_taken DESC
            LIMIT 20
        """, (chat_id,))
        top20 = cur.fetchall()

        if not top20:
            return

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ç–¥–∞–Ω–Ω—ã—Ö/–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤
        ratios = [(row[3] / row[2] if row[2] > 0 else float('inf'), row[0], row[1]) for row in top20]
        ratios.sort(key=lambda x: x[0])  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        ratio, winner_id, winner_name = ratios[0]

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—á–∏–≤–∫—É
        add_or_update_user_achievement(winner_id, chat_id, "tsarsky_like")
        add_sits(chat_id, winner_id, ACHIEVEMENT_REWARD)

        sex = get_user_sex(winner_id, chat_id)
        title = get_achievement_title("tsarsky_like", sex)

        text = f"üëë {title} –Ω–µ–¥–µ–ª–∏ ‚Äî {winner_name} (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤: {ratio:.2f})! +{ACHIEVEMENT_REWARD} —Å–∏—Ç"
        await bot.send_message(chat_id, text)

    finally:
        conn.close()
